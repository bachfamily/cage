<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="cage.cascade~" module="cage" kind="patcher">

	<digest>
		Apply biquad filters to musical data
	</digest>

	<description>
		Filters an incoming <o>bach.roll</o> or <o>bach.score</o> with
		a sequence of biquad coefficients, which change the notes' velocities.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">cageproject</metadata>
		<metadata name="tag">cage</metadata>
		<metadata name="tag">cage electrospectral</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Original musical data
			</digest>
			<description>
				The gathered syntax of the input <o>bach.roll</o> or <o>bach.score</o>, header included
				(thus obtained via a <m>dump</m> message).
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				List of filter coefficients
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Filtered musical data
			</digest>
			<description>
				The gathered syntax of the output <o>bach.roll</o> or <o>bach.score</o>.
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="initial_filter_coeff" optional="1" type="list">
			<digest>
				Initial filter coefficients
			</digest>
			<description>
				The arguments sets the initial filter coefficients. The default is
				<b>1. -1. 0. -0.9997 0.</b> (corresponding to a DC-offset removing).
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Output result
			</digest>
			<description>
				Output the result obtained from the most recently received input data.
			</description>
		</method>
		<method name="list">
			<arglist />
			<digest>
				Set list of filter coefficients
			</digest>
			<description>
				A plain list in the second inlet is converted into an <m>llll</m>, setting
				the list of filter coefficients (see <m>llll</m>).
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Filter musical data and output result, set list of filter coefficients
			</digest>
			<description>
				An <m>llll</m> in the first inlet is considered to be the gathered
				syntax of the <o>bach.roll</o> or <o>bach.score</o> to be filtered, header included
				(thus obtained via a <m>dump</m> message).
				Such notation object is then filtered and the gathered syntax of the result
				is output from the outlet. <br />
				An <m>llll</m> in the second inlet is expected to identify each filter.
				Each filter can be either given as the sequence of its 5 biquad coefficients (as for
				<o>biquad~</o>) or in its higher-level representation, with the syntax
				<b><m>filtertype</m> <m>cutoff_freq</m> <m>gain_linear</m> <m>Q_or_slope</m></b>,
				where <m>filtertype</m> is one of the following symbols:
				<b>lowpass</b>, <b>highpass</b>, <b>bandpass</b>, <b>bandstop</b>, <b>peaknotch</b>,
				<b>lowshelf</b>, <b>highshelf</b>, <b>allpass</b>.
				On the other hand, if a plain list is given, it is considered as a list of 5-by-5 biquad
				coefficients (as the ones output by <o>filtergraph~</o>), unless the length is precisely 4,
				in which case the list is supposed to contain the higher-level representation.
				Finally, if the llll has depth 3, it is supposed to represent a dynamic sequence of filters,
				which will be interpolated according to the different positions in the score. In this case, the
				syntax must be: <b>(<m>t1</m> (<m>FILTER1</m>)) (<m>t2</m> (<m>FILTER1</m>))...</b>,
				with <m>t_i</m> being increasing floating numbers from 0 to 1 (0 being the beginning of the
				<o>bach.roll</o> or <o>bach.score</o>, 1 being the end), and each <m>FILTER</m> being
				represented by its higher-level representation (and in no case by its biquad coefficients, for
				which interpolation would be cumbersome and troublesome).
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message. To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format, e
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="velthresh" get="1" set="1" type="float" size="1">
			<digest>
				Velocity Threshold
			</digest>
			<description>
				Sets a minimum velocity for the notes to be output.
				Notes whose velocity is under this threshold will be deleted. Defaults to 20.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Velocity Threshold" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		The abstraction applies the biquad filter gain response formula
		to the incoming velocities. Users can set an output velocity threshold
		in order to only output notes with a minimum velocity.
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="cage.pitchfilter" />
		<seealso name="cage.delay~" />
		<seealso name="biquad~" />
		<seealso name="cascade~" />
		<seealso name="filtergraph~" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll)">
			<description>
				Original musical data.
				The gathered syntax of the input <o>bach.roll</o> or <o>bach.score</o>, header included
				(thus obtained via a <m>dump</m> message).
			</description>
		</entry>
		<entry name ="Inlet 2 (list/llll)">
			<description>
				List of filter coefficients.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				Filtered musical data.
				The gathered syntax of the output <o>bach.roll</o> or <o>bach.score</o>.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		The abstraction applies the biquad filter gain response formula
		to the incoming velocities. Users can set an output velocity threshold
		in order to only output notes with a minimum velocity.
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
filter, frequency, apply, biquad, cascade, velocity, threshold, gain response, score, chord.
			</description>
		</entry>
	</misc>

</c74object>