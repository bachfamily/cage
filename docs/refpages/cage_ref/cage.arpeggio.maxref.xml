<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="cage.arpeggio" module="cage" kind="patcher">

	<digest>
		Create an arpeggio
	</digest>

	<description>
		Outputs the notes forming a given arpeggio, within a certain
		pitch range.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">cageproject</metadata>
		<metadata name="tag">cage</metadata>
		<metadata name="tag">cage generation</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Lower bound
			</digest>
			<description>
				The lower bound can be set either as a midicent value or a pitch.
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Upper bound
			</digest>
			<description>
				The upper bound can be set either as a midicent value or a pitch.
			</description>
		</inlet>
		<inlet id="2" type="INLET_TYPE">
			<digest>
				Chord type or pattern
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Cents
			</digest>
			<description>
				The plain llll of cents of the notes composing the arpeggio.
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="lower_bound" optional="1" type="number/pitch">
			<digest>
				Lower bound
			</digest>
			<description>
				The first optional argument sets the initial lower bound for the arpeggio (in cents or pitch)
			</description>
		</objarg>
		<objarg name="upper_bound" optional="1" type="number/pitch">
			<digest>
				Upper bound
			</digest>
			<description>
				The second optional argument sets the initial upper bound for the arpeggio (in cents or pitch)
			</description>
		</objarg>
		<objarg name="chord_type_or_pattern" optional="1" type="symbol/llll">
			<digest>
				Chord type or pattern
			</digest>
			<description>
				The third optional arguments sets the initial chord type (if it is a symbol)
				or the explicit arpeggio pattern (if it is an llll). See the <m>symbol</m> and <m>llll</m> methods
				to know more.
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Output arpeggio
			</digest>
			<description>
				Output the arpeggio obtained from the most recently received input data.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Function depends on inlet
			</digest>
			<description>
				An <m>llll</m> in the first or second inlet is expected to be a single number
				(working exactly like the <m>number</m> message) or a note name
				(working exactly like the <m>symbol</m> message). <br />
				An llll in the third inlet, can either be a single symbol (working like the
				<m>symbol</m> message), or a pattern of intervals (in cents or in pitches) defining the arpeggio.
				For instance, <b>400 400 100 300</b> builds an arpeggio formed by
				two major thirds, a semitone and a minor third (globally looped). This pattern starts
				from a given base note, set via the <m>base</m> attribute. For instance, if the <m>base</m> note
				is a G, this arpeggio would yield: G, B, C, Eb, G, B, C, Eb...
			</description>
		</method>
		<method name="number">
			<arglist />
			<digest>
				Set range boundary, output result
			</digest>
			<description>
				A number in the first inlet sets the lower bound
				for the arpeggio range, and outputs the arpeggio as a plain llll of midicents. <br />
				A number in the second inlet sets the upper bound for the arpeggio.
			</description>
		</method>
		<method name="symbol">
			<arglist />
			<digest>
				Set range boundary or chord name, output result
			</digest>
			<description>
				A symbol in the first inlet is expected to be the note name of the lower bound
				for the arpeggio range; the arpeggio is then output as a plain llll of midicents. <br />
				A symbol in the second inlet is expected to be the note name of the upper bound for the arpeggio. <br />
				A symbol in the third inlet is interpreted as a chord name, defining the arpeggio, such as <b>CM</b>
				or <b>F#maj7</b>. Each chord name is composed by the juxtaposition of the note name (in latin or
				anglosaxon style, e.g. <b>C</b>, <b>re#</b>, <b>Fb</b>...) and a suffix, determining the chord type.
				Allowed suffixes are: <b>M</b> (major chord), <b>m</b> (minor chord), <b>7</b> (dominant seventh chord),
				<b>9</b> (dominant 9th chord), <b>11</b> (dominant 11th chord),
				<b>13</b> (dominant 13th chord), <b>min7</b> or <b>m7</b> (minor chord with added minor seventh),
				<b>maj7</b> or <b>M7</b> (major chord with added major seventh), <b>aug</b> (augmented triad),
				<b>dim</b> (diminished triad), <b>dim7</b> (diminshed seventh chord).
				Some symbols (such as <b>C7</b> also coincide with pitch names, but they are accounted for as chord symbols.
				Any other chord can be obtained by setting a custom pattern (see the <m>llll</m> method).
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="base" get="1" set="1" type="atom" size="1">
			<digest>
				Base Note for Custom Arpeggio
			</digest>
			<description>
				Sets the base note for custom arpeggio.
				Arpeggi defined by an llll pattern (see <m>llll</m> method) start from a given
				base note, set via this attribute, which can either be a number (identifying
				the midicents of the base note) or a symbol (identifying the note name, in
				either latin or anglosaxon syntax).
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Base Note for Custom Arpeggio" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		The arpeggio can be defined either via a chord symbol (such
		as <b>CM</b> or <b>Fmaj7</b>) or via explicit midicent
		pattern (such as <b>400 400 100 300</b>). See the
		<m>llll</m> method in third inlet to know more.
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="cage.scale" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (number/symbol)">
			<description>
				Lower bound.
				The lower bound can be set either as a midicent value or a pitch.
			</description>
		</entry>
		<entry name ="Inlet 2 (number/symbol)">
			<description>
				Upper bound.
				The upper bound can be set either as a midicent value or a pitch.
			</description>
		</entry>
		<entry name ="Inlet 3 (symbol/llll)">
			<description>
				Chord type or pattern.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				Cents.
				The plain llll of cents of the notes composing the arpeggio.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		The arpeggio can be defined either via a chord symbol (such
		as <b>CM</b> or <b>Fmaj7</b>) or via explicit midicent
		pattern (such as <b>400 400 100 300</b>). See the
		<m>llll</m> method in third inlet to know more.
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
arpeggio, generate, name, pattern, repeat, chord, range, pitch, note.
			</description>
		</entry>
	</misc>

</c74object>