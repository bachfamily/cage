<?xml version='1.0' encoding='UTF-8'?>

<?xml-stylesheet href="./_c74_tut.xsl" type="text/xsl"?>

<chapter name="cage Tutorial 7: Working with Time">

<openfile name="WorkingWithTime" patch="WorkingWithTime.maxpat"/>


<indexinfo category="Transformation" title="Working with Time">Transformation</indexinfo>

<header>Tutorial 7: Working with Time</header>

<body>In this tutorial, we will learn how to alter the temporal aspect of the score contained in a <o>bach.roll</o> objects with a variety of approaches.</body>

<body><openpatchlink>Open the tutorial patch</openpatchlink></body>

<subhead>Frameworks</subhead>

<body>As we know, the <b>bach</b> library essentially provides two types of time representation: measured time, with measures, rests, tempi and note duration on one hand; and non-measured time, without all these notions, but rather a generic concept of "onset", that is, the moment in time at which a given event starts, and "duration". In fact, this latter representation is simpler but at the same time far more flexible, as it allows virtually any possible operation upon time, whereas the former - although almost ubiquitous in Western music - offers much more resistance to advanced manipulation. These two representations are then reflected in the opposition between the two score editors of <o>bach</o>: <o>bach.score</o> on one hand, for measured time, and <o>bach.roll</o> on the other, for non-measured time.</body>

<body>The modules for temporal transformation included in <o>cage</o> mostly deal with non-measured time. In this tutorial, we'll review a few of them.</body>


<subhead>Reversals and rotations</subhead>

Reversals and rotations are among the simplest temporal operations. They both have a clear electroacoustic counterpart. Reversal corresponds to play a sound file (or a tape, for what is worth) backwards: all the durations are preserved, but the end of each sound event is heard first, and its beginning is heard last; moreover, sound events appearing later in the file are heard first, and events appearing earlier are heard last. Classically, this kind of transformation on musical notation is called retrogradation. There is a <o>cage</o> module to perform retrogradation in one click: <o>cage.rev</o>.

The immediately next transformation in the complexity scale is rotation: we cut away the beginning of a roll, and splice it to the end of the same roll. The same exact thing can be done with a tape, or with a sound clip in any audio sequencer. This operation needs a parameter: how far from the beginning of the roll should the cut be performed? So, here is where <o>cage.rot</o> comes handy: we give it a time position in milliseconds in the right inlet, the contents of a <o>bach.roll</o> in the left inlet and it will do the trick. And what if we want to do the opposite operation, that is cutting away a segment from the end of a roll, and splice it to the beginning? Well, if you think about it, it is exactly the same operation: but yes, it can be useful to have a way to give <o>cage.rot</o> a cutting position calculated from the end of the roll, rather than from the beginning. There is a widespread convention for this in both <b>cage</b> and <b>bach</b>: everything that should be counted from the end of something is expressed with a negative number. The same convention applies here: if we introduce a negative value in <b>cage.rot</b>, it will indicate the position from the end of the roll.


<subhead>Accelerando and rallentando</subhead>

A repeated musical element gets faster and faster, or slower and slower, over time: this is a very common scenario, whether the musical element itself is an actual section of a score, or a more or less hidden pulse providing a temporal lattice for other musical actions. Now, "faster and faster" and "slower and slower" are very intuitive concepts, that have been marked in musical scores as various flavors of "accelerando" and "rallentando" since many centuries: but a precise formalization of them requires some advanced mathematics that we shall not discuss here. Luckily for us, all the math is carried out behind the scenes by the <o>cage.agogics</o> abstraction, which is exactly devoted to the task discussed at the beginning of this section. <o>cage.agogics</o> accepts, as usual, the contents of a <o>bach.roll</o>, plus some parameters: the number of intended repetitions, the total duration of the resulting accelerated (or decelerated) score and the speed at which the resulting roll will end, with respect to the speed of the original roll. These parameters can be provided respectively in the second, third and fourth inlets, or as lists in the second inlet, or as the arguments of the patch: but what do they mean? They mean that, whatever our accelerando or rallentando is, we conceive it as a continuous process in which we start reading our score at the original speed, gradually accelerate and at the end of the reading we've reached a different speed, that may be higher or lower than the original, starting one. So, if the speed we reach at the end is twice as fast as the original, we'll say that the ending speed is 2; if it's three times as fast, it will be 3; if it's twice as slow, or three times as slow, it will be 1/2 or 1/3.

Now, we may remark that these parameters are redundant: given that the starting speed is fixed (it is always 1, that is, equal to the original speed), as is the "shape" of the accelerando or rallentando, its "steepness", once we know how many times we want to repeat our element and how long the resulting score must be, there can be only one ending speed. Correspondingly, if we know the number of repetition and the ending speed, the duration of the resulting score will descend from those data. And if we know the duration of the resulting score and the ending speed, the number of repetitions will be fixed - this case is even slightly harder, as we might end up with a non-integer number of repetitions: for the whole process to make sense, we should make some approximations so as to have an integer number of repetitions. Long story short: three parameters define an accelerando, but once we have two the third is fixed and can be calculated; so, we should also give <m>none</m> for one of the three parameters, meaning that we want the machine to calculate it for us. Now, let's try some of the message boxes above <o>cage.agogics</o>, and see what happens.



<subhead>Let's do the timewarp!</subhead>

A more general way to describe the kind of operations that we performed so far (with the exception of looping a roll - but that is easily accomplished with <o>cage.looper</o>) is the following: these operations can be seen as functions that map the time of the original roll to the time of a derived roll. The <o>cage.timewarp</o> works according to this principle, with the mapping function provided through the lambda loop. Let's move to the green area of the patch, and try some presets: as we can see, a straight line at an angle of 45Â°, corresponding to the function y = x, produces an output exactly equal to the input; the same line, but in the opposite direction (y = -x), reverses the input; straight lines (y = kx) at different angles produce time compressions (with 0 &lt; k &lt; 1), time stretchings (with k &gt; 1), reversed compressions (with -1 &gt; k &gt; 0), reversed stretchings (with k &lt; -1); different, segmented shapes can replicate the behavior of <o>cage.rot</o>, insert fermatas, coalesce timespans into single instants of time; curves produces rallentando and accelerando shapes; and all these different elements can be combined. Virtually everything is possible, except looping. Of course, the function does not need to be a <o>function</o> object (by the way, notice that in order to be able to communicate with <o>function</o> we had to specify text format for the second outlet, through the <m>out nt</m>): for example, a <o>bach.scale</o> object can be inserted in the lambda loop - see the orange section of the patch.

If the <m>order</m> attribute is set to 1, the lambda function of <o>cage.timewarp</o> maps the speed of the derived roll to the time of the original roll. This means that we can set the speed of the derived roll for each instant of the original roll; just like in <o>cage.agogics</o>, the speed is always relative to the speed of the original roll, so if for instance the function has a stable value of 2 the derived roll will be twice as fast as the original. In the magenta area of the patch we can see some examples: horizontal lines produce time stretchings, time compressions and possibly reversals; other functions produce accelerandos and rallentandos of various shapes and steepness. Just, beware of crossing 0, as it would be a mathematical nonsense - we would stop for an infinitesimal amount of time, but what does this mean? Would we be still because we stopped, or moving because the stopping is infinitely short, or what? This is not too different from dividing 0 by 0: if I have zero cookies to distribute to zero kids, how many cookies would each kid receive?

Once again, the speed function can be implemented through a variety of approaches: in particular, for a stable function (resulting in a uniform stretching, compression or reversal) it may make sense to put a single message box in the lambda loop.



<subhead>Conclusion</subhead>

<body>The modules <o>cage.rev</o>, <o>cage.rot</o> and <o>cage.agogics</o> implement some common high-level operations on the temporal aspects of a non-measured score. A finer control on the temporal parameters of the score can be achieved though <o>cage.timewarp</o>, at the cost of a somewhat higher complexity.</body>

<seealsolist>
<seealso name="cage.looper">Repeat sections of a roll</seealso>
<seealso name="cage.spacer">Insert time in a score</seealso>
<seealso name="cage.wedge">Insert a roll into another roll</seealso>
</seealsolist>

</chapter>
