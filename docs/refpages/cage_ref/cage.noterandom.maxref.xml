<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="cage.noterandom" module="cage" kind="patcher">

	<digest>
		Output random MIDI notes
	</digest>

	<description>
		Outputs random MIDI notes within a given
		pitch grid, and depending to assigned probability weights.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">cageproject</metadata>
		<metadata name="tag">cage</metadata>
		<metadata name="tag">cage generation</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Output random note
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Pitch grid
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="2" type="INLET_TYPE">
			<digest>
				Relative probability weights
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="3" type="INLET_TYPE">
			<digest>
				Lambda inlet
			</digest>
			<description>
				A lambda inlet is an inlet receiving the answer from a test or modification performed on elements sent out the lambda outlets. <br />
				In this case, the answer is in a 0/1 form: if the element output from the lambda outlet is accepted
				(according to your needs, defined in the lambda loop),
				this inlet should receive a 1; otherwise it should receive a 0. <br />
				The lambda inlet also accepts the 0/1 result in a native llll form, so you can sometimes avoid the explicit @out t. <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				MIDI triplet
			</digest>
			<description>
				Outputs the current note in the random walk,
				as a triplet containing: <b><m>midicent</m>
				<m>velocity</m> <m>voice_number</m></b>
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				Lambda Outlet
			</digest>
			<description>
				Each candidate is output through the lambda outlet, so that you can
				define a patching criterium to accept or refuse such candidate.
				A lambda outlet is an outlet outputting an element on which some test or modification must be performed.
				The result of the test or modification is then expected in a lambda inlet. <br />
				In this case, the elements output from the lambda outlet have to be tested in order to know if they are accepted:
				in the first case, you should return a 1 into the lambda inlet, in the second case you should return a 0. <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="velocity" optional="1" type="int">
			<digest>
				Velocity
			</digest>
			<description>
				The first optional argument sets the initial velocity of the output notes.
			</description>
		</objarg>
		<objarg name="voice_number" optional="1" type="int">
			<digest>
				Voice number
			</digest>
			<description>
				The second optional argument sets the initial voice number of the output notes.
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Output MIDI triplet
			</digest>
			<description>
				A bang in the first inlet sends a note-off for the previously generated note (if any)
				and outputs the next note in the random walk, as a triplet containing: <b><m>midicent</m>
				<m>velocity</m> <m>voice_number</m></b>. Velocity and voice number are handled via the <m>vel</m> and
				<m>voice</m> attributes.
			</description>
		</method>
		<method name="int">
			<arglist />
			<digest>
				Lambda inlet
			</digest>
			<description>
				Fourth inlet is a lambda inlet, and if a lambda cycle is defined, expects an 1 if the output
				MIDI note is accepted, or 0 if another note should be randomly extracted.
				Indeed, when a <m>bang</m> is received, the candidate pitch is output
				through the lambda outlet (second outlet).
				A lambda inlet is an inlet receiving the answer from a test or modification performed on elements sent out the lambda outlets. <br />
				In this case, the answer is in a 0/1 form: if the element output from the lambda outlet is accepted
				(according to your needs, defined in the lambda loop),
				this inlet should receive a 1; otherwise it should receive a 0. <br />
				The lambda inlet also accepts the 0/1 result in a native llll form, so you can sometimes avoid the explicit @out t. <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Function depends on inlet
			</digest>
			<description>
				An <m>llll</m> in the second inlet is expected to be a plain list of midicents
				representing the grid in which the random walk must happen. Only the values inside such
				grid will be taken by the output notes. <br />
				An <m>llll</m> in the third inlet is expected to be a plain list having the same length as
				the list in the second inlet, and contains the relative probability of each of the pitch of the
				list in the second inlet.
				For instance, such list can be constructed via <o>cage.weightbuilder</o>. <br />
				Fourth inlet is a lambda inlet: an <m>llll</m> in the fourth inlet is automatically converted to an int
				(see <m>int</m> message).
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="noteoff" get="1" set="1" type="int" size="1">
			<digest>
				Send Note-Offs
			</digest>
			<description>
				Toggles the ability to send note-offs. By default it is on.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Send Note-Offs" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="vel" get="1" set="1" type="int" size="1">
			<digest>
				Velocity
			</digest>
			<description>
				Sets the velocity of the output note. Defaults to 100.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Velocity" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="voice" get="1" set="1" type="int" size="1">
			<digest>
				Voice Number
			</digest>
			<description>
				Sets the voice number of the output note. Defaults to 1.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Voice Number" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		A lambda cycle can be set up to validate (or not) each
		randomly picked pitch. <br />
		<o>cage.notewalk</o> is designed to be used in combination with
		<o>bach.transcribe</o>.
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="cage.notewalk" />
		<seealso name="cage.weightbuilder" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (bang)">
			<description>
				Output random note.
			</description>
		</entry>
		<entry name ="Inlet 2 (llll)">
			<description>
				Pitch grid.
			</description>
		</entry>
		<entry name ="Inlet 3 (llll)">
			<description>
				Relative probability weights.
			</description>
		</entry>
		<entry name ="Inlet 4 (int/llll)">
			<description>
				Lambda inlet.
				A lambda inlet is an inlet receiving the answer from a test or modification performed on elements sent out the lambda outlets. <br />
				In this case, the answer is in a 0/1 form: if the element output from the lambda outlet is accepted
				(according to your needs, defined in the lambda loop),
				this inlet should receive a 1; otherwise it should receive a 0. <br />
				The lambda inlet also accepts the 0/1 result in a native llll form, so you can sometimes avoid the explicit @out t. <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (list)">
			<description>
				MIDI triplet.
				Outputs the current note in the random walk,
				as a triplet containing: <b><m>midicent</m>
				<m>velocity</m> <m>voice_number</m></b>
			</description>
		</entry>
		<entry name ="Outlet 2 (llll)">
			<description>
				Lambda Outlet.
				Each candidate is output through the lambda outlet, so that you can
				define a patching criterium to accept or refuse such candidate.
				A lambda outlet is an outlet outputting an element on which some test or modification must be performed.
				The result of the test or modification is then expected in a lambda inlet. <br />
				In this case, the elements output from the lambda outlet have to be tested in order to know if they are accepted:
				in the first case, you should return a 1 into the lambda inlet, in the second case you should return a 0. <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		A lambda cycle can be set up to validate (or not) each
		randomly picked pitch. <br />
		<o>cage.notewalk</o> is designed to be used in combination with
		<o>bach.transcribe</o>.
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
pick, note, random, output, pitch, grid, probability, weight, lambda loop, validate.
			</description>
		</entry>
	</misc>

</c74object>