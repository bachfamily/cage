<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="cage.looper" module="cage" kind="patcher">

	<digest>
		Loop a portion of a bach.roll
	</digest>

	<description>
		<o>cage.looper</o> allows repeating a portion of a bach.roll a given number of times.
		Each repetition of the loop can be processed through a lambda loop.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">cageproject</metadata>
		<metadata name="tag">cage</metadata>
		<metadata name="tag">cage scores</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Original roll or score
			</digest>
			<description>
				Gathered syntax of the <o>bach.roll</o> or <o>bach.score</o> into which
				the looping must be performed
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Number of repetitions
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="2" type="INLET_TYPE">
			<digest>
				Position and optional duration of the loop model
			</digest>
			<description>
				A list of two numbers received in the third inlet sets respectively
				the starting position and duration of the loop model.
				Alternatively, a single number sets the starting position, in which case
				the model will extend until the end of the roll.
			</description>
		</inlet>
		<inlet id="3" type="INLET_TYPE">
			<digest>
				Time between loops
			</digest>
			<description>
				A list in the fourth inlet sets the time interval in ms
				for each subsequent repetition of the loop.
				If there are more elements than repetitions, the exceeding elements
				are ignored. If there are less elements than repetitions, or a single float,
				the last element will be repeated over and over as needed.
				If an empty list is provided, the time interval will always correspond
				to the length of the inserted fragment.
			</description>
		</inlet>
		<inlet id="4" type="INLET_TYPE">
			<digest>
				Next loop (lambda)
			</digest>
			<description>
				If a roll is injected through a lambda loop,
				it will be used as the next iteration of the loop.
			</description>
		</inlet>
		<inlet id="5" type="INLET_TYPE">
			<digest>
				Next time
			</digest>
			<description>
				If a float is injected through a lambda loop,
				it will be used as the time interval between
				the current and the next iteration if the loop.
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Resulting roll
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				Latest loop (lambda)
			</digest>
			<description>
				At each step of the iteration,
				the fragment that has just been inserted is output as a roll,
				to be fed into a lambda loop.
			</description>
		</outlet>
		<outlet id="2" type="INLET_TYPE">
			<digest>
				Latest time (lambda)
			</digest>
			<description>
				At each step of the iteration,
				the time interval between the one-but-last and the latest repetition
				is output, to be fed into a lambda loop.
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="count" optional="1" type="int">
			<digest>
				Number of repetition
			</digest>
			<description>
				The first optional argument sets the initial
				number of repetitions of the loop. The default is 1.
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Output result
			</digest>
			<description>
				Output the roll obtained from the most recently received input data.
			</description>
		</method>
		<method name="float">
			<arglist />
			<digest>
				Function depends on inlet
			</digest>
			<description>
			</description>
		</method>
		<method name="float">
			<arglist />
			<digest>
				In third inlet: insertion point
			</digest>
			<description>
			</description>
		</method>
		<method name="int">
			<arglist />
			<digest>
				In second inlet: number of repetitions
			</digest>
			<description>
				The number of repetitions of the loop
				can be set through an int in the second inlet.
			</description>
		</method>
		<method name="list">
			<arglist />
			<digest>
				In third inlet: insertion point and duration
			</digest>
			<description>
			</description>
		</method>
		<method name="list">
			<arglist />
			<digest>
				Function depends on inlet
			</digest>
			<description>
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Function depends on inlet
			</digest>
			<description>
				<o>cage.looper</o> expects the gathered syntax
				of a <o>bach.roll</o> object in the first inlet, a portion of which
				will be repeated according to the parameters provided in the other inlets
				and the optional lambda loop. <br />
				At each iteration of the looping process,
				the fragment that has just been written in the resulting roll
				is output from the third outlet. Subsequently, a different fragment
				(always in the form of a <o>bach.roll</o> gathered syntax)
				can be re-injected in the fifth inlet through a lambda loop,
				to be inserted at the next iteration. If nothing is received
				in the lambda inlet, the previous fragment will be inserted again.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
	</attributelist>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="cage.repeat" />
		<seealso name="cage.wedge" />
		<seealso name="cage.spacer" />
		<seealso name="cage.mix" />
		<seealso name="cage.agogics" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll)">
			<description>
				Original roll or score.
				Gathered syntax of the <o>bach.roll</o> or <o>bach.score</o> into which
				the looping must be performed
			</description>
		</entry>
		<entry name ="Inlet 2 (int)">
			<description>
				Number of repetitions.
			</description>
		</entry>
		<entry name ="Inlet 3 (float/list)">
			<description>
				Position and optional duration of the loop model.
				A list of two numbers received in the third inlet sets respectively
				the starting position and duration of the loop model.
				Alternatively, a single number sets the starting position, in which case
				the model will extend until the end of the roll.
			</description>
		</entry>
		<entry name ="Inlet 4 (float/list)">
			<description>
				Time between loops.
				A list in the fourth inlet sets the time interval in ms
				for each subsequent repetition of the loop.
				If there are more elements than repetitions, the exceeding elements
				are ignored. If there are less elements than repetitions, or a single float,
				the last element will be repeated over and over as needed.
				If an empty list is provided, the time interval will always correspond
				to the length of the inserted fragment.
			</description>
		</entry>
		<entry name ="Inlet 5 (roll)">
			<description>
				Next loop (lambda).
				If a roll is injected through a lambda loop,
				it will be used as the next iteration of the loop.
			</description>
		</entry>
		<entry name ="Inlet 6 (float)">
			<description>
				Next time.
				If a float is injected through a lambda loop,
				it will be used as the time interval between
				the current and the next iteration if the loop.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (roll)">
			<description>
				Resulting roll.
			</description>
		</entry>
		<entry name ="Outlet 2 (roll)">
			<description>
				Latest loop (lambda).
				At each step of the iteration,
				the fragment that has just been inserted is output as a roll,
				to be fed into a lambda loop.
			</description>
		</entry>
		<entry name ="Outlet 3 (float)">
			<description>
				Latest time (lambda).
				At each step of the iteration,
				the time interval between the one-but-last and the latest repetition
				is output, to be fed into a lambda loop.
			</description>
		</entry>
	</misc>

</c74object>