<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="cage.fm" module="cage" kind="patcher">

	<digest>
		Compute symbolic frequency modulation
	</digest>

	<description>
		<o>cage.fm</o> accepts two chords, or two rolls, or two scores, or a roll and a chord, or a score and a chord.
		In all but the first case, the frequency modulation is computed in time.
		The velocity of each modulating note is output from the third outlet during the process,
		and can be converted into modulation index through a lambda loop.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">cageproject</metadata>
		<metadata name="tag">cage</metadata>
		<metadata name="tag">cage electrospectral</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Carrier
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Modulating
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="2" type="INLET_TYPE">
			<digest>
				Modulation Index (lambda)
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Modulation Result
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				Velocity (lambda)
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="gate" optional="1" type="number">
			<digest>
				Modulation index
			</digest>
			<description>
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Output frequency modulation
			</digest>
			<description>
				Output the chord, roll or score obtained from the most recently received input data.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Function depends on inlet
			</digest>
			<description>
				An <m>llll</m> in the first inlet can be a chord
				(expressed as an <m>llll</m> composed of pitch-velocity sublists), a roll or a score,
				and will be treated as the carrier,
				and will cause the result of the modulation to be output. <br />
				An <m>llll</m> in the second inlet can be a chord, a roll or a score,
				and will be treated as the modulating. <br />
			</description>
		</method>
		<method name="number">
			<arglist />
			<digest>
				In third inlet: modulation index (lambda)
			</digest>
			<description>
				The velocity of each note of each modulating component
				is output from the second outlet, and a corresponding modulation index
				can be input in the third inlet through a lambda loop.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="freqthresh" get="1" set="1" type="float" size="1">
			<digest>
				Frequency Threshold
			</digest>
			<description>
				Sets the frequency threshold for two modulated components
				to be considered the same, and hence be represented as one note.
				This is also relevant for the calculation of the phase cancellations.
				The default is 10 Hz.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Frequency Threshold" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="glue" get="1" set="1" type="" size="1">
			<digest>
				Glue
			</digest>
			<description>
				The <m>glue</m> attribute, followed by two floats,
				sets the maximum pitch and time (in ms) separation
				for two consecutive modulated components to be glued together
				into one single note. See the <m>gluechord</m> message of <o>bach.roll</o>
				for more details. The default is 0 0.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Glue" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="minamp" get="1" set="1" type="float" size="1">
			<digest>
				Minimum Amplitude
			</digest>
			<description>
				Sets the amplitude of the weakest allowed component
				in the result of the modulation. The default is 0.001.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Minimum Amplitude" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="minfreq" get="1" set="1" type="float" size="1">
			<digest>
				Minimum Frequency
			</digest>
			<description>
				Sets the frequency of the lowest allowed note
				in the result of the modulation. The default is 20 Hz.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Minimum Frequency" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the followings: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed. Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		Differently from other implementations of symbolic frequency modulation,
		<o>cage.fm</o> estimates the phase oppositions produced by the corresponding audio process
		and removes the corresponding components in the resulting chord.
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="cage.rm" />
		<seealso name="cage.virtfund" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (score/roll/llll)">
			<description>
				Carrier.
			</description>
		</entry>
		<entry name ="Inlet 2 (score/roll/llll)">
			<description>
				Modulating.
			</description>
		</entry>
		<entry name ="Inlet 3 (number)">
			<description>
				Modulation Index (lambda).
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (score/roll/llll)">
			<description>
				Modulation Result.
			</description>
		</entry>
		<entry name ="Outlet 2 (float)">
			<description>
				Velocity (lambda).
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		Differently from other implementations of symbolic frequency modulation,
		<o>cage.fm</o> estimates the phase oppositions produced by the corresponding audio process
		and removes the corresponding components in the resulting chord.
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
frequency modulation, pitch, chord.
			</description>
		</entry>
	</misc>

</c74object>