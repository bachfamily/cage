<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="cage.remapvoices" module="cage" kind="patcher">

	<digest>
		Remap the voices of a roll
	</digest>

	<description>
		<o>cage.remapvoices</o> allows remapping the voices of a roll or a score,
		as well as removing, duplicating and mixing specified voices.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">cageproject</metadata>
		<metadata name="tag">cage</metadata>
		<metadata name="tag">cage scores</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Roll, score or message whose voices must be rearranged.
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Voice map
			</digest>
			<description>
				The voice map can either be a flat list,
				containing a map of voices to be moved to the destination message, roll or score,
				or a list of lists, each composed by the original and new index
				of a voice of the message, roll or score.
				In either case, 0's indicate empty voices.
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Resulting roll, score or message
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="map" optional="1" type="llll">
			<digest>
				Initial voice map
			</digest>
			<description>
				The optional argument sets the initial remapping to be performed,
				either as a flat list or as an llll of individual reassignments.
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Output result
			</digest>
			<description>
				Output the roll, score or message
				obtained from the most recently received input data.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Function depends on inlet
			</digest>
			<description>
				<o>cage.remapvoice</o> expects a roll, a score
				or an <m>addchord</m>, <m>addchords</m> or <m>addmeasures</m> message
				in the first inlet. The voices indicated by any of these syntaxes
				will be rearranged according to the <m>llll</m> received
				in the second inlet. <br />
				An <m>llll</m> in the second inlet can either be a flat list,
				containing a map of voices to be moved to the destination message, roll or score,
				or a list of lists, each composed by the original and new index
				of a voice of the message, roll or score.
				In either case, 0's indicate empty voices. <br />
				Thus, for example,
				<b>1 0 4</b> means that the first voice of the original score
				will become the first voice of the resulting score; the second voice
				of the resulting score will be empty; and the fourth voice
				of the original score will become
				the third voice of the resulting score. <br />
				On the other hand, <b>[1 4] [4 2]</b> means that the first voice
				of the original score will become the fourth voice of the resulting score,
				and the fourth voice of the original score will become
				the second voice of the resulting score.
				Of course, all this also applies to the cases of rolls or
				or <m>addchord</m>, <m>addchords</m> or <m>addmeasures</m> messages. <br />
				When working with a roll or with an <m>addchords</m> message,
				<o>cage.remapvoices</o> can mix together voices routed to the same voice number.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="keep" get="1" set="1" type="int" size="1">
			<digest>
				Keep
			</digest>
			<description>
				When the <m>trim</m> attribute is set to 0 (default),
				all the voices of the original roll, score or message
				that are not specified in the remapping llll are discarded.
				When it is set to 1, they are kept at their positions.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Keep" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="cage.spacer" />
		<seealso name="cage.wedge" />
		<seealso name="cage.explodevoices" />
		<seealso name="bach.combinevoices" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll)">
			<description>
				Roll, score or message whose voices must be rearranged..
			</description>
		</entry>
		<entry name ="Inlet 2 (llll)">
			<description>
				Voice map.
				The voice map can either be a flat list,
				containing a map of voices to be moved to the destination message, roll or score,
				or a list of lists, each composed by the original and new index
				of a voice of the message, roll or score.
				In either case, 0's indicate empty voices.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (roll)">
			<description>
				Resulting roll, score or message.
			</description>
		</entry>
	</misc>

</c74object>