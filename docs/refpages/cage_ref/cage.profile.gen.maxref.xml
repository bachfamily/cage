<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="cage.profile.gen" module="cage" kind="patcher">

	<digest>
		Generate pitch profiles
	</digest>

	<description>
		Generate a melodic profile starting from a pitch breakpoint function.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">cageproject</metadata>
		<metadata name="tag">cage</metadata>
		<metadata name="tag">cage profiles</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Sampling points
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Pitch breakpoint function
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Output cents
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Output result
			</digest>
			<description>
				Output the pitch profile obtained from the most recently received input data.
			</description>
		</method>
		<method name="int">
			<arglist />
			<digest>
				Set number of sampling points and output result
			</digest>
			<description>
				An integer number in the first inlet is the number of sampling
				point (uniformly taken in the domain), and outputs the corresponding
				sampled pitches (in midicents).
			</description>
		</method>
		<method name="list">
			<arglist />
			<digest>
				Set sampling grid, output result
			</digest>
			<description>
				A <m>list</m> in the first inlet contains the X values
				on which the pitch function must be sampled, and outputs the corresponding
				sampled pitches (in midicents). <br />
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Set pitch function or density function and parameters, output result
			</digest>
			<description>
				An <m>llll</m> in the first inlet is converted into a <m>list</m> or <m>int</m>,
				setting the sampling grid or the number of sampling points. <br />
				An <m>llll</m> in the second inlet contains the information about the pitch breakpoint function,
				and is expected to be in the form <b><m>BPT1</m> <m>BPT2</m>
				<m>BPT3</m>...</b>, where each <m>BPT</m> has the form <b>(<m>x</m> <m>y</m> <m>slope</m>)</b>.
				The <m>y</m> values must be in midicents, the <m>x</m> values can lie in any chosen interval
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="cage.profile.mirror" />
		<seealso name="cage.profile.perturb" />
		<seealso name="cage.profile.rectify" />
		<seealso name="cage.profile.filter" />
		<seealso name="cage.profile.snap" />
		<seealso name="cage.profile.stretch" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (int/list/llll)">
			<description>
				Sampling points.
			</description>
		</entry>
		<entry name ="Inlet 2 (list/llll)">
			<description>
				Pitch breakpoint function.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				Output cents.
			</description>
		</entry>
	</misc>

</c74object>