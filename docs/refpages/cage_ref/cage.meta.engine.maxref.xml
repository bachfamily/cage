<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="cage.meta.engine" module="cage" kind="patcher">

	<digest>
		Handle meta-scores by assigning patches to notes
	</digest>

	<description>
		Assigns a patch to each note or chord of a <o>bach.roll</o> or <o>bach.score</o>
		and remotely communicate with it.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">cageproject</metadata>
		<metadata name="tag">cage</metadata>
		<metadata name="tag">cage meta</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Messages with score gathered syntax
			</digest>
			<description>
				The first inlet must be connected to the first outlet of <o>bach.score</o> or <o>bach.roll</o>.
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Messages from Playout
			</digest>
			<description>
				The second inlet must be connected to the Playout of <o>bach.score</o> or <o>bach.roll</o>.
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Messages to <o>bach.roll</o> or <o>bach.score</o>
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="machine_name" optional="1" type="symbol">
			<digest>
				Machine name
			</digest>
			<description>
				Sets the machine name (which will be "default" if no name is provided).
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="(remote)">
			<arglist />
			<digest>
				Send messages to patch instances
			</digest>
			<description>
				You can send messages to a specific instance of a loaded patch, by using the <m>cage.meta.message</m> symbol as
				"send" symbol, which must be always followed by the following elements: <br />
				- Machine Name, i.e. the argument assigned to <o>cage.meta.engine</o>, of "default" if none;
				use "all" to send to all machines <br />
				- File Name (without extension), use "all" to send to all files <br />
				- Instance Number, use "all" to send to all extensions. <br />
				- Message, the actual message you need to send. If this message is the <m>open</m> symbol, the corresponding patch is opened. <br />
				For instance, <b>; cage.meta.message default cage.meta.help.patch1 1 open</b> opens the first instance of cage.meta.help.patch1.maxpat,
				while <b>; cage.meta.message all all all This is a message to all instances</b> sends a message to all instances.
			</description>
		</method>
		<method name="autoinstances">
			<arg name="release_time" optional="0" type="float" />
			<digest>
				Auto assign instance numbers
			</digest>
			<description>
				The <m>autoinstances</m> message assigns instance numbers automatically, so that no two instances will overlap,
				according to a certain release time (given in milliseconds as first argument).
				Notice that, in principle, nothing prevents you from implementing a process whose duration is longer than the
				one of the note carrying it. In this case, you can't rely on the <m>autoinstances</m> message to build the proper polyphony,
				except (of course) if a certain release time will suffice to handle all cases (e.g., if a reverb
				process is implemented, one might want to set the release time slightly greater than the reverb length).
			</description>
		</method>
		<method name="clearinstances">
			<arglist />
			<digest>
				Clear instance numbers
			</digest>
			<description>
				The <m>clearinstance</m> message clears all instance numbers in the meta-score
			</description>
		</method>
		<method name="format">
			<arglist />
			<digest>
				Format slotinfo and commands
			</digest>
			<description>
				A <m>format</m> message sends through the outlet
				the slotinfo information which should be set to the <o>bach.roll</o> or
				<o>bach.score</o> to properly handle <o>cage.meta.engine</o>.
				Such information formats the slots in the following way:
				Slot 1 - Filelist slot - hotkey: P - Patch associated with the note <br />
				Slot 2 - Int slot - hotkey: I - Instance number of the patch <br />
				You are also provided with a command, on the hotkey O, which opens the patch
				for the selected note, and the <m>playoutfullpath</m> attribute is set to 1.
			</description>
		</method>
		<method name="free">
			<arglist />
			<digest>
				Free patches
			</digest>
			<description>
				The <m>free</m> message frees all the loaded patches. In principle,
				you never need to call this method directly, since it is called automatically for you
				when needed.
			</description>
		</method>
		<method name="init">
			<arglist />
			<digest>
				Send init
			</digest>
			<description>
				The <m>init</m> message sends an "init" message to all of the loaded patches.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Function depends on inlet
			</digest>
			<description>
				The first inlet is expected to receive <m>llll</m>s from the first outlet of
				<o>bach.roll</o> or <o>bach.score</o>, namely the gathered syntax of the score body. <br />
				The second inlet is expected to receive the <m>llll</m>s coming from the playout, which
				will be properly routed to the corresponding <o>cage.meta.header</o> objects located in each
				of the patches - and will be output from their playback outlets (in case the <m>playback</m>
				attribute is set to 1) and/or from their render outlets (in case the <m>render</m> attribute
				is set to 1). In this last case, the symbolic rendered content in gathered syntax (but without
				measure levels, for <o>bach.score</o>) that has been re-injected in <o>cage.meta.header</o>'s lambda
				inlet, is properly collected and the appropriate messages for <o>bach.roll</o> or <o>bach.score</o>
				are output throught the second outlet in order to build the rendered score.
				You can also use the <m>play offline</m> message to <o>bach.roll</o> or <o>bach.score</o> to
				render the score in off-line mode.
			</description>
		</method>
		<method name="load">
			<arglist />
			<digest>
				Load patches, send init
			</digest>
			<description>
				The <m>load</m> message loads all the patches used in the score,
				and then sends an "init" message to all of them.
			</description>
		</method>
		<method name="reload">
			<arglist />
			<digest>
				Reload patches, send init
			</digest>
			<description>
				The <m>reload</m> message reloads all the patches used in the score,
				and then sends an "init" message to all of them.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="dump" get="1" set="1" type="sym_array" size="0">
			<digest>
				Items To Dump
			</digest>
			<description>
				Sets the header elements to be dumped. By default (null): all of them; set e.g. "body" to only dump body, and so on.
				See the header syntax for <o>bach.roll</o> and <o>bach.score</o>.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Items To Dump" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the <t> specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="playback" get="1" set="1" type="int" size="1">
			<digest>
				Playback
			</digest>
			<description>
				Routes the content coming from the notation object's playout to the playback outlet of each <o>cage.meta.header</o>
				(also see <m>llll</m> message).
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Playback" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="render" get="1" set="1" type="int" size="1">
			<digest>
				Render
			</digest>
			<description>
				Routes the content coming from the notation object's playout to the render outlet of each <o>cage.meta.header</o>
				(also see <m>llll</m> message).
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Render" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		The <o>cage.meta.engine</o> module works in conjunction with <o>cage.meta.header</o>,
		which must be put in all the used patches in order to properly receive messages.
		This behavior somehow shares some resemblance to the OpenMusic "maquette".
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="cage.meta.header" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll)">
			<description>
				Messages with score gathered syntax.
				The first inlet must be connected to the first outlet of <o>bach.score</o> or <o>bach.roll</o>.
			</description>
		</entry>
		<entry name ="Inlet 2 (llll)">
			<description>
				Messages from Playout.
				The second inlet must be connected to the Playout of <o>bach.score</o> or <o>bach.roll</o>.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				Messages to <o>bach.roll</o> or <o>bach.score</o>.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		The <o>cage.meta.engine</o> module works in conjunction with <o>cage.meta.header</o>,
		which must be put in all the used patches in order to properly receive messages.
		This behavior somehow shares some resemblance to the OpenMusic "maquette".
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
score, meta, metascore, engine, maquette, patch.
			</description>
		</entry>
	</misc>

</c74object>