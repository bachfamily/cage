<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="cage.sdif.ptrack.toroll" module="cage" kind="patcher">

	<digest>
		Import a partial tracking SDIF analysis into a <o>bach.roll</o>
	</digest>

	<description>
		Imports and displays a partial tracking SDIF analysis into a <o>bach.roll</o> object.
		Each stream is mapped to a different voice. Each partial is output as a note.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">cageproject</metadata>
		<metadata name="tag">cage</metadata>
		<metadata name="tag">cage SDIF</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				SDIF analysis as llll
			</digest>
			<description>
				The SDIF analysis containing partial tracking information, as the one
				output by <o>bach.readsdif</o>.
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Lambda inlet
			</digest>
			<description>
				Partial amplitude output from this lambda outlet can be mapped into
				velocities to be re-injected into this lambda inlet.
				A lambda inlet is an inlet receiving the answer from a test or modification performed on elements sent out the lambda outlets. <br />
				In this case, the answer is expected to be a modification of the elements which had been sent out:
				the element output via the lambda outlet can be customly modified and then plugged in into this lambda inlet:
				such modification will be accounted for by the algorithm. <br />
				The lambda inlet also accepts the result in llll form, so you can sometimes avoid the explicit @out t. <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				<o>bach.roll</o>'s gathered syntax
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				Lambda outlet
			</digest>
			<description>
				Partial amplitudes are output from this lambda outlet. Such amplitudes might be mapped into
				velocities to be re-injected into the lambda inlet.
				A lambda outlet is an outlet outputting an element on which some test or modification must be performed.
				The result of the test or modification is then expected in a lambda inlet. <br />
				In this case, the elements output from the lambda outlet may be customly modified, so that such modification will be taken into
				account by the algorithm. To modify each element, just use patching and then plug into the lambda inlet the
				modified version of the element. <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Output last imported analysis information
			</digest>
			<description>
				Output the information imported from the most recently input analysis <m>llll</m>.
			</description>
		</method>
		<method name="int">
			<arglist />
			<digest>
				Lambda inlet
			</digest>
			<description>
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Import SDIF analysis information
			</digest>
			<description>
				An <m>llll</m> in first inlet is expected to contain the llll form of a partial tracking
				SDIF analysis (as the one output by <o>bach.readsdif</o>).
				The output <o>bach.roll</o>'s gathered syntax is sent through the outlet (each SDIF stream corresponding to a voice). <br />
				An <m>llll</m> in second inlet is converted into an <m>int</m>.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="align" get="1" set="1" type="" size="1">
			<digest>
				
			</digest>
			<description>
				If <m>allowglissandi</m> is off, each note represents a whole partial (with
				no possible glissandi), and this attribute determines
				the way in which pitches and velocities are given to such note: <br />
				- First: The partial keeps the pitch and velocity of its first element; <br />
				- Mean (default): The partial takes the mean pitch and velocity; <br />
				- Median: The partial takes as pitch/velocity the median of the pitches/velocities. <br />
				If <m>allowglissandi</m> is on, this attribute does not affect anything.
			</description>
			<attributelist>
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="allowglissandi" get="1" set="1" type="int" size="1">
			<digest>
				Allow Glissandi
			</digest>
			<description>
				Toggles the ability to convert partials into note with a glissando
				duration line. The granularity of the glissando is also determined by the first
				element of the <m>reducethresh</m> attribute. By default this attribute is off.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Allow Glissandi" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="ampslot" get="1" set="1" type="int" size="1">
			<digest>
				Amplitude Slot
			</digest>
			<description>
				Sets the number of the slot which will contain the amplitude envelope of each partial,
				or leave 0 to ignore this envelope (default).
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Amplitude Slot" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="freqrange" get="1" set="1" type="float_array" size="0">
			<digest>
				Frequency Range
			</digest>
			<description>
				Sets a custom frequency range for outputting partials: a minimum frequency and
				a maximum frequency, both in Hertz.
				Only partials having at least one peak within such range are output.
				Default frequency range is 20 Hz to 20000 Hz.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Frequency Range" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="minamp" get="1" set="1" type="float" size="1">
			<digest>
				Minimum Amplitude Threshold
			</digest>
			<description>
				Sets a minimum amplitude threshold for a partial to be output.
				Only partials having at least one peak with a higher or equal amplitude are output.
				Default is 0.001.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Minimum Amplitude Threshold" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="mindur" get="1" set="1" type="float" size="1">
			<digest>
				Minimum Duration Threshold
			</digest>
			<description>
				Sets a minimum duration threshold for a partial to be output (in milliseconds).
				Only partials lasting at least the introduced number of milliseconds are output.
				Default is 10ms.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Minimum Duration Threshold" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="noglissmode" get="1" set="1" type="int" size="1">
			<digest>
				Importing Mode
			</digest>
			<description>
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Importing Mode" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message. To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format, e
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="phaseslot" get="1" set="1" type="int" size="1">
			<digest>
				Phase Slot
			</digest>
			<description>
				Sets the number of the slot which will contain the phase envelope of each partial,
				or leave 0 to ignore this envelope (default).
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Phase Slot" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="reducethresh" get="1" set="1" type="float_array" size="0">
			<digest>
				Breakpoint Function Reduction Threshold
			</digest>
			<description>
				Envelopes and duration lines by default are not output with one breakpoint for each peak;
				on the contrary, such envelopes are smoothed (as <o>bach.reducefunction</o> does, with <m>relative</m> attribute set to 0).
				The smoothing thresholds (see the the <m>thresh</m> attribute of <o>bach.reducefunction</o>) are entered via this attribute,
				in the following sequence: the smoothing threshold for the duration line breakpoints (in midicents, default: 10),
				the smoothing threshold for the amplitude envelopes (default: 0.01), the smoothing threshold for the phase envelopes (default: 0.).
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Breakpoint Function Reduction Threshold" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.readsdif" />
		<seealso name="bach.roll" />
		<seealso name="cage.sdif.ptrack.pack" />
		<seealso name="cage.sdif.ptrack.unpack" />
		<seealso name="cage.sdif.ptrack.resolve" />
		<seealso name="cage.sdif.ptrack.assemble" />
		<seealso name="cage.ezaddsynth~" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll)">
			<description>
				SDIF analysis as llll.
				The SDIF analysis containing partial tracking information, as the one
				output by <o>bach.readsdif</o>.
			</description>
		</entry>
		<entry name ="Inlet 2 (llll)">
			<description>
				Lambda inlet.
				Partial amplitude output from this lambda outlet can be mapped into
				velocities to be re-injected into this lambda inlet.
				A lambda inlet is an inlet receiving the answer from a test or modification performed on elements sent out the lambda outlets. <br />
				In this case, the answer is expected to be a modification of the elements which had been sent out:
				the element output via the lambda outlet can be customly modified and then plugged in into this lambda inlet:
				such modification will be accounted for by the algorithm. <br />
				The lambda inlet also accepts the result in llll form, so you can sometimes avoid the explicit @out t. <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				<o>bach.roll</o>'s gathered syntax.
			</description>
		</entry>
		<entry name ="Outlet 2 (llll)">
			<description>
				Lambda outlet.
				Partial amplitudes are output from this lambda outlet. Such amplitudes might be mapped into
				velocities to be re-injected into the lambda inlet.
				A lambda outlet is an outlet outputting an element on which some test or modification must be performed.
				The result of the test or modification is then expected in a lambda inlet. <br />
				In this case, the elements output from the lambda outlet may be customly modified, so that such modification will be taken into
				account by the algorithm. To modify each element, just use patching and then plug into the lambda inlet the
				modified version of the element. <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</entry>
	</misc>

</c74object>