<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="cage.notewalk" module="cage" kind="patcher">

	<digest>
		Output a random walk of MIDI notes
	</digest>

	<description>
		Outputs a random walk of MIDI notes within a given
		pitch grid.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">cageproject</metadata>
		<metadata name="tag">cage</metadata>
		<metadata name="tag">cage generation</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Output random note
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Pitch grid
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="2" type="INLET_TYPE">
			<digest>
				Set current pitch
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="3" type="INLET_TYPE">
			<digest>
				Admitted steps
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="4" type="INLET_TYPE">
			<digest>
				Lambda inlet
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				MIDI triplet
			</digest>
			<description>
				Outputs the current note in the random walk,
				as a triplet containing: <b><m>midicent</m>
				<m>velocity</m> <m>voice_number</m></b>
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				Picked step
			</digest>
			<description>
				The picked step.
			</description>
		</outlet>
		<outlet id="2" type="INLET_TYPE">
			<digest>
				Lambda Outlet
			</digest>
			<description>
				Each pitch candidate is output through the lambda outlet, so that you can
				define a patching criterium to accept or refuse such candidate.
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="velocity" optional="1" type="int">
			<digest>
				Velocity
			</digest>
			<description>
				The first optional argument sets the initial velocity of the output notes.
			</description>
		</objarg>
		<objarg name="voice_number" optional="1" type="int">
			<digest>
				Voice number
			</digest>
			<description>
				The second optional argument sets the initial voice number of the output notes.
			</description>
		</objarg>
		<objarg name="wrapped_list_of_steps" optional="1" type="llll">
			<digest>
				Admitted steps
			</digest>
			<description>
				The third optional argument is expected to be the wrapped list of admitted steps
				(see <m>llll</m> method).
			</description>
		</objarg>
		<objarg name="start_pitch" optional="1" type="number">
			<digest>
				Starting pitch
			</digest>
			<description>
				The fourth optional argument is expected to be the starting pitch for the walk.
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Output MIDI triplet
			</digest>
			<description>
				A bang in the first inlet sends a note-off for the previously generated note (if any)
				and outputs the next note in the random walk, as a triplet containing: <b><m>midicent</m>
				<m>velocity</m> <m>voice_number</m></b>. Velocity and voice number are handled via the <m>vel</m> and
				<m>voice</m> attributes.
			</description>
		</method>
		<method name="int">
			<arglist />
			<digest>
				Lambda inlet
			</digest>
			<description>
				Fifth inlet is a lambda inlet, and if a lambda cycle is defined, expects an 1 if the output
				MIDI note is accepted, or 0 if another note should be randomly extracted.
				Indeed, when a <m>bang</m> is received, the candidate pitch is output
				through the lambda outlet (second outlet).
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Function depends on inlet
			</digest>
			<description>
				An <m>llll</m> in the second inlet is expected to be a plain list of midicents
				representing the grid in which the random walk must happen. Only the values inside such
				grid will be taken by the output notes. <br />
				An <m>llll</m> in the third inlet is expected to be a single number, setting the current
				pitch at any given moment (see <m>number</m> method). <br />
				An <m>llll</m> in the fourth inlet is expected to be a plain list of admitted steps.
				For instance <b>1 -1</b> means that each note can only be one step ahead or one step before
				of the current note (within the introduced grid). All steps in such list will have equal probability,
				so you can repeat some numbers to increase their probability, e.g.: <b>1 1 1 1 2 1 2 1 -5 -3 -2</b>. <br />
				Fifth inlet is a lambda inlet: an <m>llll</m> in the fifth inlet is automatically converted to an int
				(see <m>int</m> message).
			</description>
		</method>
		<method name="number">
			<arglist />
			<digest>
				Set current pitch
			</digest>
			<description>
				A number in the third inlet sets the current pitch in the grid (in midicents),
				at any given moment.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="noteoff" get="1" set="1" type="int" size="1">
			<digest>
				Send Note-Offs
			</digest>
			<description>
				Toggles the ability to send note-offs. By default it is on.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Send Note-Offs" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="vel" get="1" set="1" type="int" size="1">
			<digest>
				Velocity
			</digest>
			<description>
				Sets the velocity of the output note.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Velocity" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="voice" get="1" set="1" type="int" size="1">
			<digest>
				Voice Number
			</digest>
			<description>
				Sets the voice number of the output note.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Voice Number" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		A lambda cycle can be set up to validate (or not) each
		randomly picked pitch. <br />
		<o>cage.notewalk</o> is designed to be used in combination with
		<o>bach.transcribe</o>.
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="cage.noterandom" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (bang)">
			<description>
				Output random note.
			</description>
		</entry>
		<entry name ="Inlet 2 (llll)">
			<description>
				Pitch grid.
			</description>
		</entry>
		<entry name ="Inlet 3 (llll)">
			<description>
				Set current pitch.
			</description>
		</entry>
		<entry name ="Inlet 4 (llll)">
			<description>
				Admitted steps.
			</description>
		</entry>
		<entry name ="Inlet 5 (int/llll)">
			<description>
				Lambda inlet.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (list)">
			<description>
				MIDI triplet.
				Outputs the current note in the random walk,
				as a triplet containing: <b><m>midicent</m>
				<m>velocity</m> <m>voice_number</m></b>
			</description>
		</entry>
		<entry name ="Outlet 2 (int)">
			<description>
				Picked step.
				The picked step.
			</description>
		</entry>
		<entry name ="Outlet 3 (int)">
			<description>
				Lambda Outlet.
				Each pitch candidate is output through the lambda outlet, so that you can
				define a patching criterium to accept or refuse such candidate.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		A lambda cycle can be set up to validate (or not) each
		randomly picked pitch. <br />
		<o>cage.notewalk</o> is designed to be used in combination with
		<o>bach.transcribe</o>.
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
pick, note, walk, drunk, random, output, pitch, grid, step, lambda loop, validate.
			</description>
		</entry>
	</misc>

</c74object>