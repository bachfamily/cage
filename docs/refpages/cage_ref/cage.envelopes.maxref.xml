<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="cage.envelopes" module="cage" kind="patcher">

	<digest>
		Modify a <o>bach.roll</o> or <o>bach.score</o> via synchronized envelopes
	</digest>

	<description>
		Synchronizes a set of envelopes (contained in a <o>bach.slot</o> object) to modify <o>bach.roll</o> or
		<o>bach.score</o> chords.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">cageproject</metadata>
		<metadata name="tag">cage</metadata>
		<metadata name="tag">cage scores</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Gathered syntax of original <o>bach.roll</o> or <o>bach.score</o>
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Messages from playout
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="2" type="INLET_TYPE">
			<digest>
				bang when <o>bach.roll</o> or <o>bach.score</o> is changed via the interface
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="3" type="INLET_TYPE">
			<digest>
				Messages from <o>bach.slot</o>'s "Queries and Notifications" outlet
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="4" type="INLET_TYPE">
			<digest>
				bang when <o>bach.slot</o> is changed via the interface
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="5" type="INLET_TYPE">
			<digest>
				Lambda inlet: modified chord
			</digest>
			<description>
				A lambda inlet is an inlet receiving the answer from a test or modification performed on elements sent out the lambda outlets. <br />
				In this case, the answer is expected to be a modification of the elements which had been sent out:
				the element output via the lambda outlet can be customly modified and then plugged in into this lambda inlet:
				such modification will be accounted for by the algorithm. <br />
				The lambda inlet also accepts the result in llll form, so you can sometimes avoid the explicit @out t. <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Feedback messages for <o>bach.roll</o> or <o>bach.score</o>
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="2" type="INLET_TYPE">
			<digest>
				Feedback messages for <o>bach.slot</o>
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="3" type="INLET_TYPE">
			<digest>
				Lambda outlet: current chord in gathered syntax
			</digest>
			<description>
				A lambda outlet is an outlet outputting an element on which some test or modification must be performed.
				The result of the test or modification is then expected in a lambda inlet. <br />
				In this case, the elements output from the lambda outlet may be customly modified, so that such modification will be taken into
				account by the algorithm. To modify each element, just use patching and then plug into the lambda inlet the
				modified version of the element. <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</outlet>
		<outlet id="4" type="INLET_TYPE">
			<digest>
				Lambda outlet: current function values in gathered syntax
			</digest>
			<description>
				For each lambda-output chord, all the function are sampled at its onset,
				and the result are listed and output. <br />
				A lambda outlet is an outlet outputting an element on which some test or modification must be performed.
				The result of the test or modification is then expected in a lambda inlet. <br />
				In this case, the elements output from the lambda outlet may be customly modified, so that such modification will be taken into
				account by the algorithm. To modify each element, just use patching and then plug into the lambda inlet the
				modified version of the element. <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</outlet>
		<outlet id="5" type="INLET_TYPE">
			<digest>
				Lambda outlet: additional chord information (voice, or voice and measure)
			</digest>
			<description>
				If the original object was a <o>bach.roll</o>, for each lambda-output chord, its voice number
				is output; if the original object was a <o>bach.score</o>, for each lambda-output chord its voice number
				and measure number are output. <br />
				A lambda outlet is an outlet outputting an element on which some test or modification must be performed.
				The result of the test or modification is then expected in a lambda inlet. <br />
				In this case, the elements output from the lambda outlet may be customly modified, so that such modification will be taken into
				account by the algorithm. To modify each element, just use patching and then plug into the lambda inlet the
				modified version of the element. <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Notify change
			</digest>
			<description>
				A <m>bang</m> in the third inlet must notify interface changes in
				<o>bach.roll</o> or <o>bach.score</o>. Third inlet should thus be connected with the
				rightmost outlet of the notation objects. <br />
				A <m>bang</m> in the fifth inlet must notify interface changes in
				<o>bach.slot</o>. Fifth inlet should thus be connected with the
				rightmost outlet of <o>bach.slot</o>. <br />
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Function depends on inlet
			</digest>
			<description>
				Any <m>llll</m> in expected to be the dumped content of a <o>bach.roll</o> or <o>bach.score</o>, in gathered syntax. <br />
				An <m>llll</m> in the fourth inlet is expected to contain the synchronization
				information coming from the playout of <o>bach.roll</o> or <o>bach.score</o>. <br />
				An <m>llll</m> in the second inlet is expected to contain synchronization information coming from <o>bach.slot</o>'s "Queries and Notifications"
				outlet. <br />
				An <m>llll</m> in the sixth (lambda) inlet contains the "result" of the lambda
				loop: the modified chord, to be taken into account.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
	</attributelist>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.roll" />
		<seealso name="bach.score" />
		<seealso name="bach.slot" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll)">
			<description>
				Gathered syntax of original <o>bach.roll</o> or <o>bach.score</o>.
			</description>
		</entry>
		<entry name ="Inlet 2 (llll)">
			<description>
				Messages from playout.
			</description>
		</entry>
		<entry name ="Inlet 3 (bang)">
			<description>
				bang when <o>bach.roll</o> or <o>bach.score</o> is changed via the interface.
			</description>
		</entry>
		<entry name ="Inlet 4 (llll)">
			<description>
				Messages from <o>bach.slot</o>'s "Queries and Notifications" outlet.
			</description>
		</entry>
		<entry name ="Inlet 5 (bang)">
			<description>
				bang when <o>bach.slot</o> is changed via the interface.
			</description>
		</entry>
		<entry name ="Inlet 6 (llll)">
			<description>
				Lambda inlet: modified chord.
				A lambda inlet is an inlet receiving the answer from a test or modification performed on elements sent out the lambda outlets. <br />
				In this case, the answer is expected to be a modification of the elements which had been sent out:
				the element output via the lambda outlet can be customly modified and then plugged in into this lambda inlet:
				such modification will be accounted for by the algorithm. <br />
				The lambda inlet also accepts the result in llll form, so you can sometimes avoid the explicit @out t. <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				Feedback messages for <o>bach.roll</o> or <o>bach.score</o>.
			</description>
		</entry>
		<entry name ="Outlet 2">
			<description>
				.
			</description>
		</entry>
		<entry name ="Outlet 3 (llll)">
			<description>
				Feedback messages for <o>bach.slot</o>.
			</description>
		</entry>
		<entry name ="Outlet 4 (llll)">
			<description>
				Lambda outlet: current chord in gathered syntax.
				A lambda outlet is an outlet outputting an element on which some test or modification must be performed.
				The result of the test or modification is then expected in a lambda inlet. <br />
				In this case, the elements output from the lambda outlet may be customly modified, so that such modification will be taken into
				account by the algorithm. To modify each element, just use patching and then plug into the lambda inlet the
				modified version of the element. <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</entry>
		<entry name ="Outlet 5 (llll)">
			<description>
				Lambda outlet: current function values in gathered syntax.
				For each lambda-output chord, all the function are sampled at its onset,
				and the result are listed and output. <br />
				A lambda outlet is an outlet outputting an element on which some test or modification must be performed.
				The result of the test or modification is then expected in a lambda inlet. <br />
				In this case, the elements output from the lambda outlet may be customly modified, so that such modification will be taken into
				account by the algorithm. To modify each element, just use patching and then plug into the lambda inlet the
				modified version of the element. <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</entry>
		<entry name ="Outlet 6 (llll)">
			<description>
				Lambda outlet: additional chord information (voice, or voice and measure).
				If the original object was a <o>bach.roll</o>, for each lambda-output chord, its voice number
				is output; if the original object was a <o>bach.score</o>, for each lambda-output chord its voice number
				and measure number are output. <br />
				A lambda outlet is an outlet outputting an element on which some test or modification must be performed.
				The result of the test or modification is then expected in a lambda inlet. <br />
				In this case, the elements output from the lambda outlet may be customly modified, so that such modification will be taken into
				account by the algorithm. To modify each element, just use patching and then plug into the lambda inlet the
				modified version of the element. <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</entry>
	</misc>

</c74object>