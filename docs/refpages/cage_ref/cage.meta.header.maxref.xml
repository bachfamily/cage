<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="cage.meta.header" module="cage" kind="patcher">

	<digest>
		Header for patches used in meta-scores
	</digest>

	<description>
		Handles the reception of messages in a meta-score scenario, in combination
		with <o>cage.meta.engine</o>.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">cageproject</metadata>
		<metadata name="tag">cage</metadata>
		<metadata name="tag">cage meta</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Output instance number
			</digest>
			<description>
				A bang in the first inlet will cause the instance number to be output
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Lambda inlet (rendered content)
			</digest>
			<description>
				The second inlet expects the rendered symbolic content, to be received in response to the
				<m>llll</m>s being output from the render outlet (fourth outlet). Such content must be in the standard
				gathered syntax (with no header), except that no measure level should be provided (for <o>bach.score</o>). <br />
				A lambda inlet is an inlet receiving the answer from a test or modification performed on elements sent out the lambda outlets. <br />
				In this case, the answer is some content which should be appropriately collected by the mechanism. <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Messages for <o>thispatcher</o>
			</digest>
			<description>
				The first outlet must be connected to the inlet of <o>thispatcher</o>.
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				Instance number
			</digest>
			<description>
				The patch instance number.
			</description>
		</outlet>
		<outlet id="2" type="INLET_TYPE">
			<digest>
				Playback messages
			</digest>
			<description>
				The third outlet sends the messages received by the instance where <o>cage.meta.header</o>
				is put of lllls coming from the playout of <o>bach.score</o> or <o>bach.roll</o>, for playback purposes.
			</description>
		</outlet>
		<outlet id="3" type="INLET_TYPE">
			<digest>
				Render messages
			</digest>
			<description>
				The fourth outlet sends the messages received by the instance where <o>cage.meta.header</o>
				is put of lllls coming from the playout of <o>bach.score</o> or <o>bach.roll</o>, for symbolic rendering purposes.
				The corresponding symbolic rendered portion of score (in gathered syntax, without any measure levels)
				is expected to be re-injected in <o>cage.meta.header</o>'s second (lambda) inlet.
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="(remote)">
			<arglist />
			<digest>
				Receive messages
			</digest>
			<description>
				To send a message to a specific instance of a loaded patch in a meta-score system,
				you should use the <m>cage.meta.message</m> symbol as
				"send" symbol, which must be always followed by the following elements: <br />
				- Voice Name (if any, corresponding to some sort of "machine name"), use "default" for voices
				with no name, or use "all" to send to all voices <br />
				- File Name (without extension), use "all" to send to all files <br />
				- Instance Number, use "all" to send to all extensions. <br />
				- Message, the actual message you need to send. If this message is the <m>open</m> symbol, the corresponding patch is opened. <br />
				For instance, <b>; cage.meta.message default cage.meta.help.patch1 1 open</b> opens the first instance of cage.meta.help.patch1.maxpat,
				while <b>; cage.meta.message all all all This is a message to all instances</b> sends a message to all instances.
			</description>
		</method>
		<method name="bang">
			<arglist />
			<digest>
				Output instance number
			</digest>
			<description>
				A bang will cause the patch instance number to be output from the second outlet.
				This number is automatically output at initialization.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the <t> specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		The <o> cage.meta.header </o> module works in conjunction with <o>cage.meta.engine</o>.
		This behavior somehow shares some resemblance to the OpenMusic "maquette".
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="cage.meta.engine" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (bang)">
			<description>
				Output instance number.
				A bang in the first inlet will cause the instance number to be output
			</description>
		</entry>
		<entry name ="Inlet 2 (llll)">
			<description>
				Lambda inlet (rendered content).
				The second inlet expects the rendered symbolic content, to be received in response to the
				<m>llll</m>s being output from the render outlet (fourth outlet). Such content must be in the standard
				gathered syntax (with no header), except that no measure level should be provided (for <o>bach.score</o>). <br />
				A lambda inlet is an inlet receiving the answer from a test or modification performed on elements sent out the lambda outlets. <br />
				In this case, the answer is some content which should be appropriately collected by the mechanism. <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (symbol)">
			<description>
				Messages for <o>thispatcher</o>.
				The first outlet must be connected to the inlet of <o>thispatcher</o>.
			</description>
		</entry>
		<entry name ="Outlet 2 (int)">
			<description>
				Instance number.
				The patch instance number.
			</description>
		</entry>
		<entry name ="Outlet 3 (llll)">
			<description>
				Playback messages.
				The third outlet sends the messages received by the instance where <o>cage.meta.header</o>
				is put of lllls coming from the playout of <o>bach.score</o> or <o>bach.roll</o>, for playback purposes.
			</description>
		</entry>
		<entry name ="Outlet 4 (llll)">
			<description>
				Render messages.
				The fourth outlet sends the messages received by the instance where <o>cage.meta.header</o>
				is put of lllls coming from the playout of <o>bach.score</o> or <o>bach.roll</o>, for symbolic rendering purposes.
				The corresponding symbolic rendered portion of score (in gathered syntax, without any measure levels)
				is expected to be re-injected in <o>cage.meta.header</o>'s second (lambda) inlet.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		The <o> cage.meta.header </o> module works in conjunction with <o>cage.meta.engine</o>.
		This behavior somehow shares some resemblance to the OpenMusic "maquette".
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
score, meta, metascore, header, maquette, patch.
			</description>
		</entry>
	</misc>

</c74object>