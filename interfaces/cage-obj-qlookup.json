{
  "cage.sdif.ptrack.assemble": {
    "digest": "Assemble partials into a partial tracking SDIF llll",
    "module": "cage",
    "category": [
      "cage",
      "cage SDIF"
    ],
    "keywords": [
      "SDIF file",
      "analysis",
      "partial tracking",
      "assemble",
      "stream",
      "partial"
    ],
    "seealso": [
      "bach.writesdif",
      "cage.sdif.ptrack.resolve",
      "cage.sdif.ptrack.pack",
      "cage.sdif.ptrack.toroll"
    ]
  },
  "cage.markov.analysis": {
    "digest": "Markov probability transition matrices",
    "module": "cage",
    "category": [
      "cage",
      "cage automata"
    ],
    "keywords": [
      "rule",
      "Markov",
      "chain",
      "sequence",
      "probability",
      "transition",
      "matrix",
      "analyze",
      "sparse",
      "analysis"
    ],
    "seealso": [
      "cage.markov.synthesis",
      "anal",
      "prob"
    ]
  },
  "cage.timewarp": {
    "digest": "Perform temporal distortion",
    "module": "cage",
    "category": [
      "cage",
      "cage transformation"
    ],
    "keywords": [
      "time",
      "tempo",
      "marker",
      "function",
      "accelerando",
      "rallentando",
      "agogics"
    ],
    "seealso": [
      "cage.agogics",
      "cage.timestretch"
    ]
  },
  "cage.ezptrack": {
    "digest": "Track notes in chord sequences",
    "module": "cage",
    "category": [
      "cage",
      "cage scores"
    ],
    "keywords": [
      "score",
      "partial tracking",
      "chord",
      "glue",
      "pitch",
      "time",
      "threshold",
      "sequence",
      "track",
      "note"
    ],
    "seealso": [
      "bach.roll",
      "bach.sdif.peaks.toroll"
    ]
  },
  "cage.join": {
    "digest": "Join rolls",
    "module": "cage",
    "category": [
      "cage",
      "cage scores"
    ],
    "keywords": [
      "join",
      "glue",
      "chunk",
      "segment",
      "roll",
      "together",
      "concatenate",
      "juxtapose",
      "measure",
      "score"
    ],
    "seealso": [
      "cage.slice"
    ]
  },
  "cage.timestretch": {
    "digest": "Perform temporal stretch",
    "module": "cage",
    "category": [
      "cage",
      "cage scores"
    ],
    "keywords": [
      "stretch",
      "roll",
      "time",
      "timestretch"
    ],
    "seealso": [
      "cage.timewarp"
    ]
  },
  "cage.extract": {
    "digest": "Extract portion of roll or score",
    "module": "cage",
    "category": [
      "cage",
      "cage scores"
    ],
    "keywords": [
      "extract",
      "subroll",
      "roll",
      "subscore",
      "score",
      "crop",
      "portion"
    ],
    "seealso": [
      "cage.slice"
    ]
  },
  "cage.sdif.markers.pack": {
    "digest": "Pack parameters of a markers SDIF analysis",
    "module": "cage",
    "category": [
      "cage",
      "cage SDIF"
    ],
    "keywords": [
      "SDIF file",
      "analysis",
      "markers",
      "pack",
      "gather",
      "join",
      "stream"
    ],
    "seealso": [
      "bach.writesdif",
      "cage.sdif.markers.unpack",
      "cage.sdif.markers.toroll"
    ]
  },
  "cage.profile.gen": {
    "digest": "Generate pitch profiles",
    "module": "cage",
    "category": [
      "cage",
      "cage profiles"
    ],
    "keywords": [
      "profile",
      "generate",
      "create",
      "melody",
      "pitch",
      "breakpoint function",
      "sample"
    ],
    "seealso": [
      "cage.profile.mirror",
      "cage.profile.perturb",
      "cage.profile.rectify",
      "cage.profile.filter",
      "cage.profile.snap",
      "cage.profile.stretch"
    ]
  },
  "cage.sdif.ptrack.unpack": {
    "digest": "Unpack parameters of a partial tracking SDIF analysis",
    "module": "cage",
    "category": [
      "cage",
      "cage SDIF"
    ],
    "keywords": [
      "SDIF file",
      "analysis",
      "partial tracking",
      "unpack",
      "parse",
      "separate",
      "unjoin",
      "stream"
    ],
    "seealso": [
      "bach.readsdif",
      "cage.sdif.ptrack.pack",
      "cage.sdif.ptrack.toroll",
      "cage.sdif.ptrack.resolve",
      "cage.sdif.ptrack.assemble"
    ]
  },
  "cage.chroma.fromcentroid": {
    "digest": "Find a chroma vector corresponding having a given tonal centroid",
    "module": "cage",
    "category": [
      "cage",
      "cage set theory"
    ],
    "keywords": [
      "chroma",
      "centroid",
      "convert",
      "vector",
      "transform"
    ],
    "seealso": [
      "cage.chroma.2centroid"
    ]
  },
  "cage.sdif.markers.fromroll": {
    "digest": "Export markers SDIF analysis from a <o>bach.roll</o>",
    "module": "cage",
    "category": [
      "cage",
      "cage SDIF"
    ],
    "keywords": [
      "SDIF file",
      "analysis",
      "markers",
      "convert",
      "score",
      "export"
    ],
    "seealso": [
      "bach.writesdif",
      "bach.roll",
      "cage.sdif.markers.pack",
      "cage.sdif.markers.unpack"
    ]
  },
  "cage.shift": {
    "digest": "Insert or delete time at the beginning of a score",
    "module": "cage",
    "category": [
      "cage",
      "cage scores"
    ],
    "keywords": [
      "shift",
      "move",
      "offset",
      "roll",
      "score"
    ],
    "seealso": [
      "cage.rot",
      "cage.rev",
      "cage.inv"
    ]
  },
  "cage.envelopes": {
    "digest": "Modify a <o>bach.roll</o> or <o>bach.score</o> via synchronized envelopes",
    "module": "cage",
    "category": [
      "cage",
      "cage scores"
    ],
    "keywords": [
      "score",
      "synchronize",
      "envelope",
      "curve",
      "value",
      "chord",
      "modify",
      "real-time",
      "lambda loop"
    ],
    "seealso": [
      "bach.roll",
      "bach.score",
      "bach.slot"
    ]
  },
  "cage.tonnetz.flip": {
    "digest": "Flip tonnetz coordinates",
    "module": "cage",
    "category": [
      "cage",
      "cage set theory"
    ],
    "keywords": [
      "tonnetz",
      "flip",
      "horizontal",
      "vertical",
      "symmetry",
      "coordinate"
    ],
    "seealso": [
      "cage.tonnetz.rot"
    ]
  },
  "cage.rot": {
    "digest": "Circularly rotate rolls",
    "module": "cage",
    "category": [
      "cage",
      "cage scores"
    ],
    "keywords": [
      "rotate",
      "circular",
      "roll"
    ],
    "seealso": [
      "cage.rev",
      "cage.inv",
      "cage.shift"
    ]
  },
  "cage.transp": {
    "digest": "Transpose scores",
    "module": "cage",
    "category": [
      "cage",
      "cage scores"
    ],
    "keywords": [
      "transpose",
      "roll",
      "score"
    ],
    "seealso": [
      "cage.rev",
      "cage.rot",
      "cage.freqshift"
    ]
  },
  "cage.sdif.chordseq.toroll": {
    "digest": "Import a partial tracking SDIF analysis into a <o>bach.roll</o>",
    "module": "cage",
    "category": [
      "cage",
      "cage SDIF"
    ],
    "keywords": [
      "SDIF file",
      "analysis",
      "chord sequence",
      "convert",
      "score",
      "import",
      "stream",
      "voice"
    ],
    "seealso": [
      "bach.readsdif",
      "bach.roll",
      "cage.sdif.chordseq.pack",
      "cage.sdif.chordseq.unpack",
      "cage.ezaddsynth~",
      "bach.ezmidiplay"
    ]
  },
  "cage.closer": {
    "digest": "Modify pitch octave to approach a given pitch",
    "module": "cage",
    "category": [
      "cage",
      "cage scores"
    ],
    "keywords": [
      "modify",
      "octave",
      "change",
      "approach",
      "near",
      "pitch",
      "pitch-class",
      "close",
      "closer"
    ],
    "seealso": [
      "cage.notesnap"
    ]
  },
  "cage.sdif.chordseq.pack": {
    "digest": "Pack parameters of a partial tracking SDIF analysis",
    "module": "cage",
    "category": [
      "cage",
      "cage SDIF"
    ],
    "keywords": [
      "SDIF file",
      "analysis",
      "chord sequence",
      "pack",
      "gather",
      "join",
      "stream"
    ],
    "seealso": [
      "bach.writesdif",
      "cage.sdif.chordseq.unpack",
      "cage.sdif.chordseq.toroll"
    ]
  },
  "cage.chroma.topcset": {
    "digest": "Convert a chroma vector into pitch-classes and velocities",
    "module": "cage",
    "category": [
      "cage",
      "cage set theory"
    ],
    "keywords": [
      "chroma",
      "pitch-class",
      "convert",
      "vector",
      "velocity",
      "threshold"
    ],
    "seealso": [
      "cage.chroma.frompcset"
    ]
  },
  "cage.profile.perturb": {
    "digest": "Randomly perturb a pitch profile",
    "module": "cage",
    "category": [
      "cage",
      "cage profiles"
    ],
    "keywords": [
      "profile",
      "perturb",
      "random",
      "amount",
      "pitch",
      "melody"
    ],
    "seealso": [
      "cage.profile.gen",
      "cage.profile.mirror",
      "cage.profile.rectify",
      "cage.profile.filter",
      "cage.profile.snap",
      "cage.profile.stretch"
    ]
  },
  "cage.arpeggio": {
    "digest": "Create an arpeggio",
    "module": "cage",
    "category": [
      "cage",
      "cage generation"
    ],
    "keywords": [
      "arpeggio",
      "generate",
      "name",
      "pattern",
      "repeat",
      "chord",
      "range",
      "pitch",
      "note"
    ],
    "seealso": [
      "cage.scale"
    ]
  },
  "cage.sdif.fzero.toroll": {
    "digest": "Import a fundamental frequency SDIF analysis into a <o>bach.roll</o>",
    "module": "cage",
    "category": [
      "cage",
      "cage SDIF"
    ],
    "keywords": [
      "SDIF file",
      "analysis",
      "fundamental frequency",
      "convert",
      "score",
      "import",
      "stream",
      "voice"
    ],
    "seealso": [
      "bach.readsdif",
      "bach.roll",
      "cage.sdif.fzero.pack",
      "cage.sdif.fzero.unpack",
      "cage.ezaddsynth~"
    ]
  },
  "cage.dynamics": {
    "digest": "Process velocities",
    "module": "cage",
    "category": [
      "cage",
      "cage electrospectral"
    ],
    "keywords": [
      "velocity",
      "compress",
      "limiter",
      "gain"
    ],
    "seealso": [
      "cage.envelopes"
    ]
  },
  "cage.rm": {
    "digest": "Compute symbolic ring modulation",
    "module": "cage",
    "category": [
      "cage",
      "cage electrospectral"
    ],
    "keywords": [
      "ring modulation",
      "pitch",
      "chord"
    ],
    "seealso": [
      "cage.fm",
      "cage.virtfund"
    ]
  },
  "cage.harmser": {
    "digest": "Create an harmonic series",
    "module": "cage",
    "category": [
      "cage",
      "cage generation"
    ],
    "keywords": [
      "harmonic series",
      "generate",
      "stretch",
      "fundamental",
      "pitch",
      "note"
    ],
    "seealso": [
      "cage.scale",
      "cage.arpeggio"
    ]
  },
  "cage.profile.mirror": {
    "digest": "Invert pitch profile",
    "module": "cage",
    "category": [
      "cage",
      "cage profiles"
    ],
    "keywords": [
      "profile",
      "invert",
      "melody",
      "pitch",
      "mirror"
    ],
    "seealso": [
      "cage.profile.gen",
      "cage.profile.perturb",
      "cage.profile.rectify",
      "cage.profile.filter",
      "cage.profile.snap",
      "cage.profile.stretch"
    ]
  },
  "cage.sdif.markers.unpack": {
    "digest": "Unpack parameters of a markers SDIF analysis",
    "module": "cage",
    "category": [
      "cage",
      "cage SDIF"
    ],
    "keywords": [
      "SDIF file",
      "analysis",
      "markers",
      "unpack",
      "parse",
      "separate",
      "unjoin",
      "stream"
    ],
    "seealso": [
      "bach.readsdif",
      "cage.sdif.markers.pack",
      "cage.sdif.markers.toroll"
    ]
  },
  "cage.inv": {
    "digest": "Perform inversion",
    "module": "cage",
    "category": [
      "cage",
      "cage scores"
    ],
    "keywords": [
      "reverse",
      "inverse",
      "roll",
      "score"
    ],
    "seealso": [
      "cage.rot",
      "cage.rev",
      "cage.shift"
    ]
  },
  "cage.sdif.peaks.unpack": {
    "digest": "Unpack parameters of a peaks SDIF analysis",
    "module": "cage",
    "category": [
      "cage",
      "cage SDIF"
    ],
    "keywords": [
      "SDIF file",
      "analysis",
      "peaks",
      "unpack",
      "parse",
      "separate",
      "unjoin",
      "stream"
    ],
    "seealso": [
      "bach.readsdif",
      "cage.sdif.peaks.pack",
      "cage.sdif.peaks.toroll"
    ]
  },
  "cage.explodevoices": {
    "digest": "Route chords to different voices",
    "module": "cage",
    "category": [
      "cage",
      "cage scores"
    ],
    "keywords": [
      "explode",
      "voice",
      "route",
      "chords",
      "slot",
      "score"
    ],
    "seealso": [
      "cage.remapvoices",
      "bach.combinevoices",
      "bach.roll",
      "bach.score"
    ]
  },
  "cage.notewalk": {
    "digest": "Output a random walk of MIDI notes",
    "module": "cage",
    "category": [
      "cage",
      "cage generation"
    ],
    "keywords": [
      "pick",
      "note",
      "walk",
      "drunk",
      "random",
      "output",
      "pitch",
      "grid",
      "step",
      "lambda loop",
      "validate"
    ],
    "seealso": [
      "cage.noterandom"
    ]
  },
  "cage.sdif.ptrack.resolve": {
    "digest": "Resolve parameters of a partial tracking SDIF analysis",
    "module": "cage",
    "category": [
      "cage",
      "cage SDIF"
    ],
    "keywords": [
      "SDIF file",
      "analysis",
      "partial tracking",
      "resolve",
      "stream",
      "partial"
    ],
    "seealso": [
      "bach.readsdif",
      "cage.sdif.ptrack.assemble",
      "cage.sdif.ptrack.unpack",
      "cage.sdif.ptrack.toroll"
    ]
  },
  "cage.cascade~": {
    "digest": "Apply biquad filters to musical data",
    "module": "cage",
    "category": [
      "cage",
      "cage electrospectral"
    ],
    "keywords": [
      "filter",
      "frequency",
      "apply",
      "biquad",
      "cascade",
      "velocity",
      "threshold",
      "gain response",
      "score",
      "chord"
    ],
    "seealso": [
      "cage.pitchfilter",
      "cage.delay~",
      "biquad~",
      "cascade~",
      "filtergraph~"
    ]
  },
  "cage.sdif.markers.toroll": {
    "digest": "Import a markers SDIF analysis into a <o>bach.roll</o>",
    "module": "cage",
    "category": [
      "cage",
      "cage SDIF"
    ],
    "keywords": [
      "SDIF file",
      "analysis",
      "markers",
      "convert",
      "score",
      "import"
    ],
    "seealso": [
      "bach.readsdif",
      "bach.roll",
      "cage.sdif.markers.pack",
      "cage.sdif.markers.unpack"
    ]
  },
  "cage.sdif.peaks.pack": {
    "digest": "Pack parameters of a peaks SDIF analysis",
    "module": "cage",
    "category": [
      "cage",
      "cage SDIF"
    ],
    "keywords": [
      "SDIF file",
      "analysis",
      "peaks",
      "pack",
      "gather",
      "join",
      "stream"
    ],
    "seealso": [
      "bach.writesdif",
      "cage.sdif.peaks.unpack",
      "cage.sdif.peaks.toroll"
    ]
  },
  "cage.sdif.fzero.pack": {
    "digest": "Pack parameters of a fundamental frequency SDIF analysis",
    "module": "cage",
    "category": [
      "cage",
      "cage SDIF"
    ],
    "keywords": [
      "SDIF file",
      "analysis",
      "fundamental frequency",
      "pack",
      "gather",
      "join",
      "stream"
    ],
    "seealso": [
      "bach.writesdif",
      "cage.sdif.fzero.unpack",
      "cage.sdif.fzero.toroll"
    ]
  },
  "cage.sdif.fzero.unpack": {
    "digest": "Unpack parameters of a fundamental frequency SDIF analysis",
    "module": "cage",
    "category": [
      "cage",
      "cage SDIF"
    ],
    "keywords": [
      "SDIF file",
      "analysis",
      "fundamental frequency",
      "unpack",
      "parse",
      "separate",
      "unjoin",
      "stream"
    ],
    "seealso": [
      "bach.readsdif",
      "cage.sdif.fzero.pack",
      "cage.sdif.fzero.toroll"
    ]
  },
  "cage.scale": {
    "digest": "Create a scale",
    "module": "cage",
    "category": [
      "cage",
      "cage generation"
    ],
    "keywords": [
      "scale",
      "generate",
      "name",
      "pattern",
      "repeat",
      "chord",
      "range",
      "pitch",
      "note"
    ],
    "seealso": [
      "cage.arpeggio"
    ]
  },
  "cage.agogics": {
    "digest": "Create accelerandi and rallentandi",
    "module": "cage",
    "category": [
      "cage",
      "cage transformation"
    ],
    "keywords": [
      "time",
      "tempo",
      "accelerando",
      "rallentando",
      "agogics",
      "acceleration",
      "constant",
      "repeat",
      "repetition",
      "cell"
    ],
    "seealso": [
      "cage.timewarp"
    ]
  },
  "cage.profile.filter": {
    "digest": "Filter pitch profiles",
    "module": "cage",
    "category": [
      "cage",
      "cage profiles"
    ],
    "keywords": [
      "profile",
      "filter",
      "apply",
      "melody",
      "pitch"
    ],
    "seealso": [
      "cage.profile.gen",
      "cage.profile.mirror",
      "cage.profile.perturb",
      "cage.profile.rectify",
      "cage.profile.snap",
      "cage.profile.stretch"
    ]
  },
  "cage.virtfund": {
    "digest": "Compute virtual fundamentals",
    "module": "cage",
    "category": [
      "cage",
      "cage electrospectral"
    ],
    "keywords": [
      "virtual fundamental",
      "pitch",
      "score",
      "chord"
    ],
    "seealso": [
      "cage.fm",
      "cage.rm",
      "cage.timewarp"
    ]
  },
  "cage.ezsampler~": {
    "digest": "Quick soundfiles sequencing",
    "module": "cage",
    "category": [
      "cage",
      "cage audio"
    ],
    "keywords": [
      "audio rendering",
      "sample",
      "sampler",
      "sequence",
      "soundfiles",
      "play",
      "slot",
      "score",
      "quick"
    ],
    "seealso": [
      "cage.ezsynth~",
      "bach.roll",
      "bach.score",
      "bach.ezmidiplay"
    ]
  },
  "cage.profile.snap": {
    "digest": "Snap pitch profiles to pitch grids",
    "module": "cage",
    "category": [
      "cage",
      "cage profiles"
    ],
    "keywords": [
      "profile",
      "snap",
      "grid",
      "pitch",
      "melody"
    ],
    "seealso": [
      "cage.profile.gen",
      "cage.profile.mirror",
      "cage.profile.perturb",
      "cage.profile.rectify",
      "cage.profile.filter",
      "cage.profile.stretch"
    ]
  },
  "cage.repeat": {
    "digest": "Repeat a roll or score",
    "module": "cage",
    "category": [
      "cage",
      "cage scores"
    ],
    "keywords": [
      "loop",
      "roll",
      "repeat"
    ],
    "seealso": [
      "cage.looper",
      "cage.wedge",
      "cage.spacer",
      "cage.mix",
      "cage.agogics"
    ]
  },
  "cage.chain": {
    "digest": "One-dimensional cellular automata and L-systems",
    "module": "cage",
    "category": [
      "cage",
      "cage automata"
    ],
    "keywords": [
      "cellular automata",
      "chain",
      "L-system",
      "rewrite",
      "write",
      "sequence",
      "vector",
      "rule",
      "system",
      "lambda loop"
    ],
    "seealso": [
      "cage.life"
    ]
  },
  "cage.sdif.ptrack.pack": {
    "digest": "Pack parameters of a partial tracking SDIF analysis",
    "module": "cage",
    "category": [
      "cage",
      "cage SDIF"
    ],
    "keywords": [
      "SDIF file",
      "analysis",
      "partial tracking",
      "pack",
      "gather",
      "join",
      "stream"
    ],
    "seealso": [
      "bach.writesdif",
      "cage.sdif.ptrack.unpack",
      "cage.sdif.ptrack.toroll",
      "cage.sdif.ptrack.assemble"
    ]
  },
  "cage.wedge": {
    "digest": "Insert a roll in another roll",
    "module": "cage",
    "category": [
      "cage",
      "cage scores"
    ],
    "keywords": [
      "insert",
      "space",
      "roll",
      "split"
    ],
    "seealso": [
      "cage.mix",
      "cage.spacer",
      "cage.mix",
      "cage.glue"
    ]
  },
  "cage.pitchfilter": {
    "digest": "Apply pitch filters to musical data",
    "module": "cage",
    "category": [
      "cage",
      "cage electrospectral"
    ],
    "keywords": [
      "filter",
      "pitch",
      "apply",
      "velocity",
      "threshold",
      "breakpoint function",
      "score",
      "chord"
    ],
    "seealso": [
      "cage.cascade~"
    ]
  },
  "cage.lumbricus": {
    "digest": "Generate rule-based sequences",
    "module": "cage",
    "category": [
      "cage",
      "cage automata"
    ],
    "keywords": [
      "sequence",
      "cell",
      "rule",
      "family",
      "weight",
      "chain"
    ],
    "seealso": [
      "cage.chain",
      "cage.life",
      "bach.constraints"
    ]
  },
  "cage.mix": {
    "digest": "Mix rolls",
    "module": "cage",
    "category": [
      "cage",
      "cage scores"
    ],
    "keywords": [
      "mix",
      "superimpose",
      "roll",
      "score"
    ],
    "seealso": [
      "cage.looper",
      "cage.spacer",
      "cage.wedge"
    ]
  },
  "cage.tonnetz.rot": {
    "digest": "Rotate tonnetz coordinates",
    "module": "cage",
    "category": [
      "cage",
      "cage set theory"
    ],
    "keywords": [
      "tonnetz",
      "rotate",
      "coordinate",
      "step",
      "degree",
      "clockwise",
      "counterclockwise"
    ],
    "seealso": [
      "cage.tonnetz.flip"
    ]
  },
  "cage.sdif.peaks.toroll": {
    "digest": "Import a peaks SDIF analysis into a <o>bach.roll</o>",
    "module": "cage",
    "category": [
      "cage",
      "cage SDIF"
    ],
    "keywords": [
      "SDIF file",
      "analysis",
      "peaks",
      "convert",
      "score",
      "import",
      "stream",
      "voice"
    ],
    "seealso": [
      "bach.readsdif",
      "bach.roll",
      "cage.sdif.peaks.pack",
      "cage.sdif.peaks.unpack",
      "cage.ezaddsynth~",
      "cage.ezptrack"
    ]
  },
  "cage.ezsynth~": {
    "digest": "Quick additive synthesizer",
    "module": "cage",
    "category": [
      "cage",
      "cage audio"
    ],
    "keywords": [
      "audio rendering",
      "synthesize",
      "additive synthesis",
      "slot",
      "score",
      "quick"
    ],
    "seealso": [
      "cage.ezsampler~",
      "bach.roll",
      "bach.score",
      "bach.ezmidiplay"
    ]
  },
  "cage.remapvoices": {
    "digest": "Remap the voices of a roll",
    "module": "cage",
    "category": [
      "cage",
      "cage scores"
    ],
    "keywords": [
      "voice",
      "map",
      "remap",
      "roll",
      "score"
    ],
    "seealso": [
      "cage.spacer",
      "cage.wedge",
      "cage.explodevoices",
      "bach.combinevoices"
    ]
  },
  "cage.slice": {
    "digest": "Slice roll",
    "module": "cage",
    "category": [
      "cage",
      "cage scores"
    ],
    "keywords": [
      "slice",
      "split",
      "chunk",
      "segment",
      "roll"
    ],
    "seealso": [
      "cage.join"
    ]
  },
  "cage.meta.engine": {
    "digest": "Handle meta-scores by assigning patches to notes",
    "module": "cage",
    "category": [
      "cage",
      "cage meta"
    ],
    "keywords": [
      "score",
      "meta",
      "metascore",
      "engine",
      "maquette",
      "patch"
    ],
    "seealso": [
      "cage.meta.header"
    ]
  },
  "cage.rhythminterp": {
    "digest": "Interpolate between chords",
    "module": "cage",
    "category": [
      "cage",
      "cage transformation"
    ],
    "keywords": [
      "rhythm",
      "interpolate",
      "chord"
    ],
    "seealso": [
      "cage.chordinterp",
      "cage.fm",
      "cage.rm",
      "cage.rollinterp"
    ]
  },
  "cage.sdif.ptrack.toroll": {
    "digest": "Import a partial tracking SDIF analysis into a <o>bach.roll</o>",
    "module": "cage",
    "category": [
      "cage",
      "cage SDIF"
    ],
    "keywords": [
      "SDIF file",
      "analysis",
      "partial tracking",
      "convert",
      "score",
      "import",
      "stream",
      "voice"
    ],
    "seealso": [
      "bach.readsdif",
      "bach.roll",
      "cage.sdif.ptrack.pack",
      "cage.sdif.ptrack.unpack",
      "cage.sdif.ptrack.resolve",
      "cage.sdif.ptrack.assemble",
      "cage.ezaddsynth~"
    ]
  },
  "cage.profile.rectify": {
    "digest": "Rectify pitch profiles via reflections",
    "module": "cage",
    "category": [
      "cage",
      "cage profiles"
    ],
    "keywords": [
      "profile",
      "rectify",
      "clip",
      "force",
      "region",
      "reflect",
      "mirror",
      "pitch",
      "melody"
    ],
    "seealso": [
      "cage.profile.gen",
      "cage.profile.mirror",
      "cage.profile.perturb",
      "cage.profile.filter",
      "cage.profile.snap",
      "cage.profile.stretch"
    ]
  },
  "cage.freqshift": {
    "digest": "Transpose scores linearly in the frequency domain",
    "module": "cage",
    "category": [
      "cage",
      "cage electrospectral"
    ],
    "keywords": [
      "transpose",
      "linear",
      "linearly",
      "shift",
      "frequency",
      "freqshift",
      "roll",
      "score"
    ],
    "seealso": [
      "cage.transp",
      "cage.rev",
      "cage.rot"
    ]
  },
  "cage.looper": {
    "digest": "Loop a portion of a bach.roll",
    "module": "cage",
    "category": [
      "cage",
      "cage scores"
    ],
    "keywords": [
      "loop",
      "roll",
      "repeat",
      "insert"
    ],
    "seealso": [
      "cage.repeat",
      "cage.wedge",
      "cage.spacer",
      "cage.mix",
      "cage.agogics"
    ]
  },
  "cage.life": {
    "digest": "Two-dimensional cellular automata",
    "module": "cage",
    "category": [
      "cage",
      "cage automata"
    ],
    "keywords": [
      "cellular automata",
      "Conway",
      "Game of Life",
      "rewrite",
      "write",
      "sequence",
      "matrix",
      "rule",
      "system",
      "lambda loop"
    ],
    "seealso": [
      "cage.chain"
    ]
  },
  "cage.chroma.tocentroid": {
    "digest": "Find tonal centroid of a chroma vector",
    "module": "cage",
    "category": [
      "cage",
      "cage set theory"
    ],
    "keywords": [
      "chroma",
      "centroid",
      "convert",
      "vector",
      "transform"
    ],
    "seealso": [
      "cage.chroma.fromcentroid"
    ]
  },
  "cage.fm": {
    "digest": "Compute symbolic frequency modulation",
    "module": "cage",
    "category": [
      "cage",
      "cage electrospectral"
    ],
    "keywords": [
      "frequency modulation",
      "pitch",
      "chord"
    ],
    "seealso": [
      "cage.rm",
      "cage.virtfund"
    ]
  },
  "cage.profile.stretch": {
    "digest": "Stretch pitch profiles",
    "module": "cage",
    "category": [
      "cage",
      "cage profiles"
    ],
    "keywords": [
      "profile",
      "stretch",
      "pitch",
      "melody",
      "center",
      "factor"
    ],
    "seealso": [
      "cage.profile.gen",
      "cage.profile.mirror",
      "cage.profile.perturb",
      "cage.profile.rectify",
      "cage.profile.filter",
      "cage.profile.snap"
    ]
  },
  "cage.rollinterp": {
    "digest": "Interpolate two <o>bach.roll</o> objects",
    "module": "cage",
    "category": [
      "cage",
      "cage scores"
    ],
    "keywords": [
      "interpolate",
      "score",
      "crossfade",
      "random",
      "probability",
      "modify",
      "velocity",
      "threshold"
    ],
    "seealso": [
      "bach.roll"
    ]
  },
  "cage.chordinterp": {
    "digest": "Interpolate between chords",
    "module": "cage",
    "category": [
      "cage",
      "cage transformation"
    ],
    "keywords": [
      "pitch",
      "interpolate",
      "chord"
    ],
    "seealso": [
      "cage.rhythminterp",
      "cage.fm",
      "cage.rm",
      "cage.rollinterp"
    ]
  },
  "cage.granulate": {
    "digest": "Perform symbolic granulation",
    "module": "cage",
    "category": [
      "cage",
      "cage electrospectral"
    ],
    "keywords": [
      "granulate",
      "score",
      "grain",
      "size",
      "region",
      "interval",
      "density"
    ],
    "seealso": [
      "bach.roll",
      "bach.score"
    ]
  },
  "cage.spacer": {
    "digest": "Insert time in a roll",
    "module": "cage",
    "category": [
      "cage",
      "cage scores"
    ],
    "keywords": [
      "silence",
      "insert",
      "space",
      "roll",
      "split"
    ],
    "seealso": [
      "cage.shift",
      "cage.wedge",
      "cage.mix",
      "cage.looper"
    ]
  },
  "cage.weightbuilder": {
    "digest": "Build probability weights",
    "module": "cage",
    "category": [
      "cage",
      "cage generation"
    ],
    "keywords": [
      "build",
      "probability",
      "weight",
      "density function",
      "breakpoint function",
      "gaussian",
      "lognormal",
      "uniform",
      "pareto",
      "parameter"
    ],
    "seealso": [
      "cage.noterandom"
    ]
  },
  "cage.rev": {
    "digest": "Perform retrogrades",
    "module": "cage",
    "category": [
      "cage",
      "cage scores"
    ],
    "keywords": [
      "retrograde",
      "reverse",
      "roll",
      "score"
    ],
    "seealso": [
      "cage.rot",
      "cage.inv",
      "cage.shift"
    ]
  },
  "cage.markov.synthesis": {
    "digest": "Calculate Markov transitions",
    "module": "cage",
    "category": [
      "cage",
      "cage automata"
    ],
    "keywords": [
      "rule",
      "Markov",
      "chain",
      "sequence",
      "probability",
      "transition",
      "matrix",
      "calculate",
      "extract",
      "pick",
      "random",
      "synthesis"
    ],
    "seealso": [
      "cage.markov.analysis",
      "anal",
      "prob"
    ]
  },
  "cage.sdif.chordseq.unpack": {
    "digest": "Unpack parameters of a chord sequence SDIF analysis",
    "module": "cage",
    "category": [
      "cage",
      "cage SDIF"
    ],
    "keywords": [
      "SDIF file",
      "analysis",
      "chord sequence",
      "chordseq",
      "unpack",
      "parse",
      "separate",
      "unjoin",
      "stream"
    ],
    "seealso": [
      "bach.readsdif",
      "cage.sdif.chordseq.pack",
      "cage.sdif.chordseq.toroll"
    ]
  },
  "cage.trim": {
    "digest": "Trim empty time",
    "module": "cage",
    "category": [
      "cage",
      "cage scores"
    ],
    "keywords": [
      "trim",
      "empty",
      "remove",
      "blank",
      "time",
      "offset"
    ],
    "seealso": [
      "cage.wedge",
      "cage.spacer",
      "cage.shift"
    ]
  },
  "cage.noterandom": {
    "digest": "Output random MIDI notes",
    "module": "cage",
    "category": [
      "cage",
      "cage generation"
    ],
    "keywords": [
      "pick",
      "note",
      "random",
      "output",
      "pitch",
      "grid",
      "probability",
      "weight",
      "lambda loop",
      "validate"
    ],
    "seealso": [
      "cage.notewalk",
      "cage.weightbuilder"
    ]
  },
  "cage.chroma.frompcset": {
    "digest": "Convert a pitch-class set into a chroma vector",
    "module": "cage",
    "category": [
      "cage",
      "cage set theory"
    ],
    "keywords": [
      "chroma",
      "pitch-class",
      "convert",
      "vector",
      "velocity"
    ],
    "seealso": [
      "cage.chroma.topcset"
    ]
  },
  "cage.meta.header": {
    "digest": "Header for patches used in meta-scores",
    "module": "cage",
    "category": [
      "cage",
      "cage meta"
    ],
    "keywords": [
      "score",
      "meta",
      "metascore",
      "header",
      "maquette",
      "patch"
    ],
    "seealso": [
      "cage.meta.engine"
    ]
  }
}
